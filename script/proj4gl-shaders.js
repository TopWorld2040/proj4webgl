
define([], function() {
return {"proj/stere.glsl": "ZmxvYXQgc3Nmbl8oZmxvYXQgcGhpdCwgZmxvYXQgc2lucGhpLCBmbG9hdCBlY2NlbikKewogICAgc2lucGhpICo9IGVjY2VuOwogICAgcmV0dXJuICh0YW4oLjUgKiAoSEFMRl9QSSArIHBoaXQpKSAqCgkgICAgcG93KCgxLiAtIHNpbnBoaSkgLyAoMS4gKyBzaW5waGkpLCAuNSAqIGVjY2VuKSk7Cn0KCi8vIFN0ZXJlb2dyYXBoaWMgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5CnZlYzIgc3RlcmVfZm9yd2FyZHModmVjMiBwLCBzdGVyZV9wYXJhbXMgcGFyYW1zKQp7CiAgICBmbG9hdCBsb24gPSBwLng7CiAgICBmbG9hdCBsYXQgPSBwLnk7CiAgICBmbG9hdCBzaW5sYXQgPSBzaW4obGF0KTsKICAgIGZsb2F0IGNvc2xhdCA9IGNvcyhsYXQpOwogICAgZmxvYXQgeCwgeSwgQSwgWCwgc2luWCwgY29zWDsKICAgIGZsb2F0IGRsb24gPSBhZGp1c3RfbG9uKGxvbiAtIHBhcmFtcy5sb25nMCk7CgogICAgaWYgKGFicyhhYnMobG9uIC0gcGFyYW1zLmxvbmcwKSAtIFBJKSA8PSBFUFNMTgoJJiYgYWJzKGxhdCArIHBhcmFtcy5sYXQwKSA8PSBFUFNMTikgewoJLy9jYXNlIG9mIHRoZSBvcmlnaW5lIHBvaW50CgkvL3RyYWNlKCdzdGVyZTpwYXJhbXMuaXMgdGhlIG9yaWdpbiBwb2ludCcpOwoJLy9wLng9TmFOOwoJLy9wLnk9TmFOOwoJcmV0dXJuIHZlYzIoMC4sIDAuKTsKICAgIH0KCiAgICBpZiAoMCAhPSBwYXJhbXMuc3BoZXJlKSB7CgkvL3RyYWNlKCdzdGVyZTpzcGhlcmUgY2FzZScpOwoJQSA9IDIuICogcGFyYW1zLmswIC8gKDEuMCArIHBhcmFtcy5zaW5sYXQwICogc2lubGF0ICsKCQkJICAgICBwYXJhbXMuY29zbGF0MCAqIGNvc2xhdCAqIGNvcyhkbG9uKSk7CglwLnggPSBwYXJhbXMuYSAqIEEgKiBjb3NsYXQgKiBzaW4oZGxvbikgKyBwYXJhbXMueDA7CglwLnkgPQoJICAgIHBhcmFtcy5hICogQSAqIChwYXJhbXMuY29zbGF0MCAqIHNpbmxhdCAtCgkJCSAgICBwYXJhbXMuc2lubGF0MCAqIGNvc2xhdCAqIGNvcyhkbG9uKSkgKwoJICAgIHBhcmFtcy55MDsKCXJldHVybiBwOwogICAgfSBlbHNlIHsKCVggPSAyLjAgKiBhdGFuKHNzZm5fKGxhdCwgc2lubGF0LCBwYXJhbXMuZSkpIC0gSEFMRl9QSTsKCWNvc1ggPSBjb3MoWCk7CglzaW5YID0gc2luKFgpOwoJaWYgKGFicyhwYXJhbXMuY29zbGF0MCkgPD0gRVBTTE4pIHsKCSAgICBmbG9hdCB0cyA9CgkJdHNmbnoocGFyYW1zLmUsIGxhdCAqIHBhcmFtcy5jb24sIHBhcmFtcy5jb24gKiBzaW5sYXQpOwoJICAgIGZsb2F0IHJoID0gMi4wICogcGFyYW1zLmEgKiBwYXJhbXMuazAgKiB0cyAvIHBhcmFtcy5jb25zOwoKCSAgICBwLnggPSBwYXJhbXMueDAgKyByaCAqIHNpbihsb24gLSBwYXJhbXMubG9uZzApOwoJICAgIHAueSA9IHBhcmFtcy55MCAtIHBhcmFtcy5jb24gKiByaCAqIGNvcyhsb24gLSBwYXJhbXMubG9uZzApOwoJICAgIC8vdHJhY2UocC50b1N0cmluZygpKTsKCSAgICByZXR1cm4gcDsKCX0gZWxzZSBpZiAoYWJzKHBhcmFtcy5zaW5sYXQwKSA8IEVQU0xOKSB7CgkgICAgLy9FcQoJICAgIC8vdHJhY2UoJ3N0ZXJlOmVxdWF0ZXVyJyk7CgkgICAgQSA9IDIuMCAqIHBhcmFtcy5hICogcGFyYW1zLmswIC8gKDEuMCArIGNvc1ggKiBjb3MoZGxvbikpOwoJICAgIHAueSA9IEEgKiBzaW5YOwoJfSBlbHNlIHsKCSAgICAvL290aGVyIGNhc2UKCSAgICAvL3RyYWNlKCdzdGVyZTpub3JtYWwgY2FzZScpOwoJICAgIEEgPSAyLjAgKiBwYXJhbXMuYSAqIHBhcmFtcy5rMCAqIHBhcmFtcy5tczEgLyAocGFyYW1zLmNvc1gwICoKCQkJCQkJCSAgICgxLjAgKwoJCQkJCQkJICAgIHBhcmFtcy5zaW5YMCAqCgkJCQkJCQkgICAgc2luWCArCgkJCQkJCQkgICAgcGFyYW1zLmNvc1gwICoKCQkJCQkJCSAgICBjb3NYICoKCQkJCQkJCSAgICBjb3MoZGxvbikpKTsKCSAgICBwLnkgPQoJCUEgKiAocGFyYW1zLmNvc1gwICogc2luWCAtCgkJICAgICBwYXJhbXMuc2luWDAgKiBjb3NYICogY29zKGRsb24pKSArIHBhcmFtcy55MDsKCX0KCXAueCA9IEEgKiBjb3NYICogc2luKGRsb24pICsgcGFyYW1zLngwOwoKICAgIH0KCiAgICAvL3RyYWNlKHAudG9TdHJpbmcoKSk7CiAgICByZXR1cm4gcDsKfQoKLy8gYmFja3dhcmRzLCBpLmUuIHgsIHkgLT4gbG9uLCBsYXQKdmVjMiBzdGVyZV9iYWNrd2FyZHModmVjMiBwLCBzdGVyZV9wYXJhbXMgcGFyYW1zKQp7CglwLngtPXBhcmFtcy54MDsKCXAueS09cGFyYW1zLnkwOwoJZmxvYXQgbG9uLCBsYXQ7CglmbG9hdCByaCA9IHNxcnQocC54KnAueCArIHAueSpwLnkpOwoJaWYgKDAgIT0gcGFyYW1zLnNwaGVyZSl7CgkJZmxvYXQgYz0yLiphdGFuKHJoLygwLjUqcGFyYW1zLmEqcGFyYW1zLmswKSk7CgkJbG9uPXBhcmFtcy5sb25nMDsKCQlsYXQ9cGFyYW1zLmxhdDA7CgkJaWYgKHJoPD1FUFNMTil7CgkJCXAueD1sb247CgkJCXAueT1sYXQ7CgkJCXJldHVybiBwOwoJCX0KCQlsYXQ9YXNpbihjb3MoYykqcGFyYW1zLnNpbmxhdDArcC55KnNpbihjKSpwYXJhbXMuY29zbGF0MC9yaCk7CgkJaWYgKGFicyhwYXJhbXMuY29zbGF0MCk8RVBTTE4pewoJCQlpZiAocGFyYW1zLmxhdDA+MC4wKXsKCQkJCWxvbj1hZGp1c3RfbG9uKHBhcmFtcy5sb25nMCthdGFuKHAueCwtMS4wKnAueSkpOwoJCQl9IGVsc2UgewoJCQkJbG9uPWFkanVzdF9sb24ocGFyYW1zLmxvbmcwK2F0YW4ocC54LHAueSkpOwoJCQl9CgkJfSBlbHNlIHsKCQkJbG9uPWFkanVzdF9sb24ocGFyYW1zLmxvbmcwK2F0YW4ocC54KnNpbihjKSxyaCpwYXJhbXMuY29zbGF0MCpjb3MoYyktcC55KnBhcmFtcy5zaW5sYXQwKnNpbihjKSkpOwoJCX0KCQlwLng9bG9uOwoJCXAueT1sYXQ7CgkJcmV0dXJuIHA7CgkJCQkKCX0gZWxzZSB7CgkJaWYgKGFicyhwYXJhbXMuY29zbGF0MCk8PUVQU0xOKXsKCQkJaWYgKHJoPD1FUFNMTil7CgkJCQlsYXQ9cGFyYW1zLmxhdDA7CgkJCQlsb249cGFyYW1zLmxvbmcwOwoJCQkJcC54PWxvbjsKCQkJCXAueT1sYXQ7CgkJCQkKCQkJCS8vdHJhY2UocC50b1N0cmluZygpKTsKCQkJCXJldHVybiBwOwoJCQl9CgkJCXAueCo9cGFyYW1zLmNvbjsKCQkJcC55Kj1wYXJhbXMuY29uOwoKCQkJZmxvYXQgdHMgPSByaCpwYXJhbXMuY29ucy8oMi4wKnBhcmFtcy5hKnBhcmFtcy5rMCk7CgkJCWxhdD1wYXJhbXMuY29uKnBoaTJ6KHBhcmFtcy5lLHRzKTsKCQkJbG9uPXBhcmFtcy5jb24qYWRqdXN0X2xvbihwYXJhbXMuY29uKnBhcmFtcy5sb25nMCthdGFuKHAueCwtMS4wKnAueSkpOwoJCX0gZWxzZSB7CgkJCWZsb2F0IGNlID0gMi4wKmF0YW4ocmgqcGFyYW1zLmNvc1gwLygyLjAqcGFyYW1zLmEqcGFyYW1zLmswKnBhcmFtcy5tczEpKTsKCQkJbG9uPXBhcmFtcy5sb25nMDsKCQkJZmxvYXQgQ2hpOwoJCQlpZiAocmg8PUVQU0xOKXsKCQkJCUNoaT1wYXJhbXMuWDA7CgkJCX0gZWxzZSB7CgkJCQlDaGk9YXNpbihjb3MoY2UpKnBhcmFtcy5zaW5YMCtwLnkqc2luKGNlKSpwYXJhbXMuY29zWDAvcmgpOwoJCQkJbG9uPWFkanVzdF9sb24ocGFyYW1zLmxvbmcwK2F0YW4ocC54KnNpbihjZSkscmgqcGFyYW1zLmNvc1gwKmNvcyhjZSktcC55KnBhcmFtcy5zaW5YMCpzaW4oY2UpKSk7CgkJCX0KCQkJbGF0PS0xLjAqcGhpMnoocGFyYW1zLmUsdGFuKDAuNSooSEFMRl9QSStDaGkpKSk7CgkJCQoJCX0KCX0KCQoJCQkKCXAueD1sb247CglwLnk9bGF0OwoJCQoJLy90cmFjZShwLnRvU3RyaW5nKCkpOwoJcmV0dXJuIHA7Cn0KCi8vIHZpbTpzeW50YXg9Yzpzdz00OnN0cz00OmV0Cg==", "proj/eqc.glsl": "Lyogc2ltaWxhciB0byBlcXVpLmpzIEZJWE1FIHByb2o0IHVzZXMgZXFjICovCgovLyBmb3J3YXJkIGVxdWF0aW9ucy0tbWFwcGluZyBsYXQsbG9uZyB0byB4LHkKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KdmVjMiBlcWNfZm9yd2FyZHModmVjMiBwLCBlcWNfcGFyYW1zIHBhcmFtcykKewogICAgZmxvYXQgbG9uID0gcC54OwogICAgZmxvYXQgbGF0ID0gcC55OwoKICAgIGZsb2F0IGRsb24gPSBhZGp1c3RfbG9uKGxvbiAtIHBhcmFtcy5sb25nMCk7CiAgICBmbG9hdCBkbGF0ID0gYWRqdXN0X2xhdChsYXQgLSBwYXJhbXMubGF0MCk7CiAgICBwLnggPSBwYXJhbXMueDAgKyAocGFyYW1zLmEgKiBkbG9uICogcGFyYW1zLnJjKTsKICAgIHAueSA9IHBhcmFtcy55MCArIChwYXJhbXMuYSAqIGRsYXQpOwogICAgcmV0dXJuIHA7Cn0KCi8vIGludmVyc2UgZXF1YXRpb25zLS1tYXBwaW5nIHgseSB0byBsYXQvbG9uZwovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQp2ZWMyIGVxY19iYWNrd2FyZHModmVjMiBwLCBlcWNfcGFyYW1zIHBhcmFtcykKewogICAgZmxvYXQgeCA9IHAueDsKICAgIGZsb2F0IHkgPSBwLnk7CgogICAgcC54ID0KCWFkanVzdF9sb24ocGFyYW1zLmxvbmcwICsKCQkgICAoKHggLSBwYXJhbXMueDApIC8gKHBhcmFtcy5hICogcGFyYW1zLnJjKSkpOwogICAgcC55ID0gYWRqdXN0X2xhdChwYXJhbXMubGF0MCArICgoeSAtIHBhcmFtcy55MCkgLyAocGFyYW1zLmEpKSk7CiAgICByZXR1cm4gcDsKfQoKLy8gdmltOnN5bnRheD1jOnN3PTQ6c3RzPTQ6ZXQK", "proj/lcc-params.json": {"float": ["k0", "x0", "y0", "a", "ns", "f0", "e", "long0", "rh"]}, "proj/eqc-params.json": {"float": ["long0", "lat0", "x0", "y0", "a", "rc"]}, "proj/stere-params.json": {"int": ["sphere", "mode"], "float": ["a", "e", "k0", "coslat0", "sinlat0", "con", "cons", "ms1", "cosX0", "sinX0", "long0", "lat0", "x0", "y0", "X0"]}, "proj/merc-params.json": {"int": ["sphere"], "float": ["a", "k0", "x0", "y0", "e", "long0"]}, "proj/aea-params.json": {"int": ["sphere"], "float": ["x0", "y0", "a", "ns0", "long0", "rh", "c", "e3", "es", "sin_phi", "cos_phi"]}, "proj/lcc.glsl": "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKTkFNRSAgICAgICAgICAgICAgICAgICAgICAgICAgICBMQU1CRVJUIENPTkZPUk1BTCBDT05JQwoKUFVSUE9TRToJVHJhbnNmb3JtcyBpbnB1dCBsb25naXR1ZGUgYW5kIGxhdGl0dWRlIHRvIEVhc3RpbmcgYW5kCgkJTm9ydGhpbmcgZm9yIHRoZSBMYW1iZXJ0IENvbmZvcm1hbCBDb25pYyBwcm9qZWN0aW9uLiAgVGhlCgkJbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBtdXN0IGJlIGluIHJhZGlhbnMuICBUaGUgRWFzdGluZwoJCWFuZCBOb3J0aGluZyB2YWx1ZXMgd2lsbCBiZSByZXR1cm5lZCBpbiBtZXRlcnMuCgoKQUxHT1JJVEhNIFJFRkVSRU5DRVMKCjEuICBTbnlkZXIsIEpvaG4gUC4sICJNYXAgUHJvamVjdGlvbnMtLUEgV29ya2luZyBNYW51YWwiLCBVLlMuIEdlb2xvZ2ljYWwKICAgIFN1cnZleSBQcm9mZXNzaW9uYWwgUGFwZXIgMTM5NSAoU3VwZXJzZWRlcyBVU0dTIEJ1bGxldGluIDE1MzIpLCBVbml0ZWQKICAgIFN0YXRlIEdvdmVybm1lbnQgUHJpbnRpbmcgT2ZmaWNlLCBXYXNoaW5ndG9uIEQuQy4sIDE5ODcuCgoyLiAgU255ZGVyLCBKb2huIFAuIGFuZCBWb3hsYW5kLCBQaGlsaXAgTS4sICJBbiBBbGJ1bSBvZiBNYXAgUHJvamVjdGlvbnMiLAogICAgVS5TLiBHZW9sb2dpY2FsIFN1cnZleSBQcm9mZXNzaW9uYWwgUGFwZXIgMTQ1MyAsIFVuaXRlZCBTdGF0ZSBHb3Zlcm5tZW50CioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgovLyBMYW1iZXJ0IENvbmZvcm1hbCBjb25pYyBmb3J3YXJkIGVxdWF0aW9ucy0tbWFwcGluZyBsYXQsbG9uZyB0byB4LHkKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KdmVjMiBsY2NfZm9yd2FyZHModmVjMiBwLCBsY2NfcGFyYW1zIHBhcmFtcykKewoKICAgIGZsb2F0IGxvbiA9IHAueDsKICAgIGZsb2F0IGxhdCA9IHAueTsKCiAgICAvLyBzaW5ndWxhciBjYXNlcyA6CiAgICBpZiAoYWJzKDIuICogYWJzKGxhdCkgLSBQSSkgPD0gRVBTTE4pIHsKCWxhdCA9IHNpZ24obGF0KSAqIChIQUxGX1BJIC0gMi4gKiBFUFNMTik7CiAgICB9CgogICAgZmxvYXQgY29uID0gYWJzKGFicyhsYXQpIC0gSEFMRl9QSSk7CiAgICBmbG9hdCB0cywgcmgxOwogICAgaWYgKGNvbiA+IEVQU0xOKSB7Cgl0cyA9IHRzZm56KHBhcmFtcy5lLCBsYXQsIHNpbihsYXQpKTsKCXJoMSA9IHBhcmFtcy5hICogcGFyYW1zLmYwICogcG93KHRzLCBwYXJhbXMubnMpOwogICAgfSBlbHNlIHsKCWNvbiA9IGxhdCAqIHBhcmFtcy5uczsKCWlmIChjb24gPD0gMC4pIHsKCSAgICAvLyBQcm9qNGpzLnJlcG9ydEVycm9yKCJsY2M6Zm9yd2FyZDogTm8gUHJvamVjdGlvbiIpOwoJICAgIHJldHVybiB2ZWMyKDAuLCAwLik7Cgl9CglyaDEgPSAwLjsKICAgIH0KICAgIGZsb2F0IHRoZXRhID0gcGFyYW1zLm5zICogYWRqdXN0X2xvbihsb24gLSBwYXJhbXMubG9uZzApOwogICAgcC54ID0gcGFyYW1zLmswICogKHJoMSAqIHNpbih0aGV0YSkpICsgcGFyYW1zLngwOwogICAgcC55ID0gcGFyYW1zLmswICogKHBhcmFtcy5yaCAtIHJoMSAqIGNvcyh0aGV0YSkpICsgcGFyYW1zLnkwOwoKICAgIHJldHVybiBwOwp9CgovLyBMYW1iZXJ0IENvbmZvcm1hbCBDb25pYyBpbnZlcnNlIGVxdWF0aW9ucy0tbWFwcGluZyB4LHkgdG8gbGF0L2xvbmcKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KdmVjMiBsY2NfYmFja3dhcmRzKHZlYzIgcCwgbGNjX3BhcmFtcyBwYXJhbXMpCnsKCiAgICBmbG9hdCByaDEsIGNvbiwgdHM7CiAgICBmbG9hdCBsYXQsIGxvbjsKICAgIGZsb2F0IHggPSAocC54IC0gcGFyYW1zLngwKSAvIHBhcmFtcy5rMDsKICAgIGZsb2F0IHkgPSAocGFyYW1zLnJoIC0gKHAueSAtIHBhcmFtcy55MCkgLyBwYXJhbXMuazApOwogICAgaWYgKHBhcmFtcy5ucyA+IDAuKSB7CglyaDEgPSBzcXJ0KHggKiB4ICsgeSAqIHkpOwoJY29uID0gMS4wOwogICAgfSBlbHNlIHsKCXJoMSA9IC1zcXJ0KHggKiB4ICsgeSAqIHkpOwoJY29uID0gLTEuMDsKICAgIH0KICAgIGZsb2F0IHRoZXRhID0gMC4wOwogICAgaWYgKHJoMSAhPSAwLikgewoJdGhldGEgPSBhdGFuKChjb24gKiB4KSwgKGNvbiAqIHkpKTsKICAgIH0KICAgIGlmICgocmgxICE9IDAuKSB8fCAocGFyYW1zLm5zID4gMC4wKSkgewoJY29uID0gMS4wIC8gcGFyYW1zLm5zOwoJdHMgPSBwb3coKHJoMSAvIChwYXJhbXMuYSAqIHBhcmFtcy5mMCkpLCBjb24pOwoJbGF0ID0gcGhpMnoocGFyYW1zLmUsIHRzKTsKCWlmIChsYXQgPT0gLTk5OTkuKQoJICAgIHJldHVybiB2ZWMyKDAuLCAwLik7CiAgICB9IGVsc2UgewoJbGF0ID0gLUhBTEZfUEk7CiAgICB9CiAgICBsb24gPSBhZGp1c3RfbG9uKHRoZXRhIC8gcGFyYW1zLm5zICsgcGFyYW1zLmxvbmcwKTsKCiAgICBwLnggPSBsb247CiAgICBwLnkgPSBsYXQ7CiAgICByZXR1cm4gcDsKfQoKCi8vIHZpbTpzeW50YXg9Yzpzdz00OnN0cz00OmV0Cg==", "proj/cea.glsl": "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKTkFNRSAgICAgICAgICAgICAgICAgICAgTEFNQkVSVCBDWUxJTkRSSUNBTCBFUVVBTCBBUkVBCgpQVVJQT1NFOglUcmFuc2Zvcm1zIGlucHV0IGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgdG8gRWFzdGluZyBhbmQKCQlOb3J0aGluZyBmb3IgdGhlIExhbWJlcnQgQ3lsaW5kcmljYWwgRXF1YWwgQXJlYSBwcm9qZWN0aW9uLgogICAgICAgICAgICAgICAgVGhpcyBjbGFzcyBvZiBwcm9qZWN0aW9uIGluY2x1ZGVzIHRoZSBCZWhybWFubiBhbmQgCiAgICAgICAgICAgICAgICBHYWxsLVBldGVycyBQcm9qZWN0aW9ucy4gIFRoZQoJCWxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgbXVzdCBiZSBpbiByYWRpYW5zLiAgVGhlIEVhc3RpbmcKCQlhbmQgTm9ydGhpbmcgdmFsdWVzIHdpbGwgYmUgcmV0dXJuZWQgaW4gbWV0ZXJzLgoKUFJPR1JBTU1FUiAgICAgICAgICAgICAgREFURSAgICAgICAgICAgIAotLS0tLS0tLS0tICAgICAgICAgICAgICAtLS0tClIuIE1hcnNkZW4gICAgICAgICAgICAgIEF1Z3VzdCAyMDA5CldpbndhZWQgU29mdHdhcmUgVGVjaCBMTEMsIGh0dHA6Ly93d3cud2lud2FlZC5jb20KClRoaXMgZnVuY3Rpb24gd2FzIGFkYXB0ZWQgZnJvbSB0aGUgTWlsbGVyIEN5bGluZHJpY2FsIFByb2plY3Rpb24gaW4gdGhlIFByb2o0SlMKbGlicmFyeS4KCk5vdGU6IFRoaXMgaW1wbGVtZW50YXRpb24gYXNzdW1lcyBhIFNwaGVyaWNhbCBFYXJ0aC4gVGhlIChjb21tZW50ZWQpIGNvZGUgCmhhcyBiZWVuIGluY2x1ZGVkIGZvciB0aGUgZWxsaXBzb2lkYWwgZm9yd2FyZCB0cmFuc2Zvcm0sIGJ1dCBkZXJpdmF0aW9uIG9mIAp0aGUgZWxsaXNwb2lkYWwgaW52ZXJzZSB0cmFuc2Zvcm0gaXMgYmV5b25kIG1lLiBOb3RlIHRoYXQgbW9zdCBvZiB0aGUgClByb2o0SlMgaW1wbGVtZW50YXRpb25zIGRvIE5PVCBjdXJyZW50bHkgc3VwcG9ydCBlbGxpcHNvaWRhbCBmaWd1cmVzLiAKVGhlcmVmb3JlIHBhcmFtcy5pcyBub3Qgc2VlbiBhcyBhIHByb2JsZW0gLSBlc3BlY2lhbGx5IHBhcmFtcy5sYWNrIG9mIHN1cHBvcnQgCmlzIGV4cGxpY2l0bHkgc3RhdGVkIGhlcmUuCiAKQUxHT1JJVEhNIFJFRkVSRU5DRVMKCjEuICAiQ2FydG9ncmFwaGljIFByb2plY3Rpb24gUHJvY2VkdXJlcyBmb3IgdGhlIFVOSVggRW52aXJvbm1lbnQgLSAKICAgICBBIFVzZXIncyBNYW51YWwiIGJ5IEdlcmFsZCBJLiBFdmVuZGVuLCBVU0dTIE9wZW4gRmlsZSBSZXBvcnQgOTAtMjg0CiAgICBhbmQgUmVsZWFzZSA0IEludGVyaW0gUmVwb3J0cyAoMjAwMykKCjIuICBTbnlkZXIsIEpvaG4gUC4sICJGbGF0dGVuaW5nIHRoZSBFYXJ0aCAtIFR3byBUaG91c2FuZCBZZWFycyBvZiBNYXAgCiAgICBQcm9qZWN0aW9ucyIsIFVuaXYuIENoaWNhZ28gUHJlc3MsIDE5OTMKKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCi8qIEN5bGluZHJpY2FsIEVxdWFsIEFyZWEgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5CiAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCnZlYzIgY2VhX2ZvcndhcmRzKHZlYzIgcCwgY2VhX3BhcmFtcyBwYXJhbXMpCnsKICAgIGZsb2F0IGxvbiA9IHAueDsKICAgIGZsb2F0IGxhdCA9IHAueTsKICAgIGZsb2F0IHgsIHk7CiAgICAvKiBGb3J3YXJkIGVxdWF0aW9ucwogICAgICAgLS0tLS0tLS0tLS0tLS0tLS0gKi8KICAgIGZsb2F0IGRsb24gPSBhZGp1c3RfbG9uKGxvbiAtIHBhcmFtcy5sb25nMCk7CiAgICBpZiAoMCAhPSBwYXJhbXMuc3BoZXJlKSB7Cgl4ID0gcGFyYW1zLngwICsgcGFyYW1zLmEgKiBkbG9uICogY29zKHBhcmFtcy5sYXRfdHMpOwoJeSA9IHBhcmFtcy55MCArIHBhcmFtcy5hICogc2luKGxhdCkgLyBjb3MocGFyYW1zLmxhdF90cyk7CiAgICB9IGVsc2UgewoJZmxvYXQgcXMgPSBxc2ZueihwYXJhbXMuZSwgc2luKGxhdCkpOwoJeCA9IHBhcmFtcy54MCArIHBhcmFtcy5hICogcGFyYW1zLmswICogZGxvbjsKCXkgPSBwYXJhbXMueTAgKyBwYXJhbXMuYSAqIHFzICogMC41IC8gcGFyYW1zLmswOwogICAgfQoKICAgIHAueCA9IHg7CiAgICBwLnkgPSB5OwogICAgcmV0dXJuIHA7Cn0JCQkJLy9jZWFGd2QoKQoKLyogQ3lsaW5kcmljYWwgRXF1YWwgQXJlYSBpbnZlcnNlIGVxdWF0aW9ucy0tbWFwcGluZyB4LHkgdG8gbGF0L2xvbmcKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KdmVjMiBjZWFfYmFja3dhcmRzKHZlYzIgcCwgY2VhX3BhcmFtcyBwYXJhbXMpCnsKICAgIHAueCAtPSBwYXJhbXMueDA7CiAgICBwLnkgLT0gcGFyYW1zLnkwOwoKICAgIGZsb2F0IGxvbiA9IGFkanVzdF9sb24ocGFyYW1zLmxvbmcwICsKCQkJICAgKHAueCAvIHBhcmFtcy5hKSAvIGNvcyhwYXJhbXMubGF0X3RzKSk7CgogICAgZmxvYXQgbGF0ID0gYXNpbigocC55IC8gcGFyYW1zLmEpICogY29zKHBhcmFtcy5sYXRfdHMpKTsKCiAgICBwLnggPSBsb247CiAgICBwLnkgPSBsYXQ7CiAgICByZXR1cm4gcDsKfQkJCQkvL2NlYUludigpCgovLyB2aW06c3ludGF4PWM6c3c9NDpzdHM9NDpldAo=", "proj/cea-params.json": {"int": ["sphere"], "float": ["a", "x0", "y0", "long0", "lat_ts", "e", "k0"]}, "proj/laea.glsl": "", "proj/tmerc-params.json": {"int": ["sphere"], "float": ["a", "k0", "lat0", "long0", "x0", "y0", "ml0", "es", "ep2", "e0", "e1", "e2", "e3"]}, "proj/laea-params.json": {"int": ["sphere", "mode"], "float": ["a", "x0", "y0", "phi0", "sinph0", "cosph0", "dd", "rq", "qp", "sinb1", "cosb1", "long0", "e", "xmf", "ymf"], "float[3]": ["apa"]}, "proj/tmerc.glsl": "ICAvKioKICAgIFRyYW5zdmVyc2UgTWVyY2F0b3IgRm9yd2FyZCAgLSBsb25nL2xhdCB0byB4L3kKICAgIGxvbmcvbGF0IGluIHJhZGlhbnMKICAqLwp2ZWMyIHRtZXJjX2ZvcndhcmRzKHZlYzIgcCwgdG1lcmNfcGFyYW1zIHBhcmFtcykKewogICAgZmxvYXQgbG9uID0gcC54OwogICAgZmxvYXQgbGF0ID0gcC55OwoKICAgIGZsb2F0IGRlbHRhX2xvbiA9IGFkanVzdF9sb24obG9uIC0gcGFyYW1zLmxvbmcwKTsJLy8gRGVsdGEgbG9uZ2l0dWRlCiAgICBmbG9hdCBjb247CQkJLy8gY29uZSBjb25zdGFudAogICAgZmxvYXQgeCwgeTsKICAgIGZsb2F0IHNpbl9waGkgPSBzaW4obGF0KTsKICAgIGZsb2F0IGNvc19waGkgPSBjb3MobGF0KTsKCiAgICBpZiAoMCAhPSBwYXJhbXMuc3BoZXJlKSB7CS8qIHNwaGVyaWNhbCBmb3JtICovCglmbG9hdCBiID0gY29zX3BoaSAqIHNpbihkZWx0YV9sb24pOwoJaWYgKChhYnMoYWJzKGIpIC0gMS4wKSkgPCAuMDAwMDAwMDAwMSkgewoJICAgIC8vUHJvajRqcy5yZXBvcnRFcnJvcigidG1lcmM6Zm9yd2FyZDogUG9pbnQgcHJvamVjdHMgaW50byBpbmZpbml0eSIpOwoJICAgIHJldHVybiB2ZWMyKDAuLCAwLik7Cgl9IGVsc2UgewoJICAgIHggPSAuNSAqIHBhcmFtcy5hICogcGFyYW1zLmswICogbG9nKCgxLjAgKyBiKSAvICgxLjAgLSBiKSk7CgkgICAgY29uID0gYWNvcyhjb3NfcGhpICogY29zKGRlbHRhX2xvbikgLyBzcXJ0KDEuMCAtIGIgKiBiKSk7CgkgICAgaWYgKGxhdCA8IDAuKQoJCWNvbiA9IC1jb247CgkgICAgeSA9IHBhcmFtcy5hICogcGFyYW1zLmswICogKGNvbiAtIHBhcmFtcy5sYXQwKTsKCX0KICAgIH0gZWxzZSB7CglmbG9hdCBhbCA9IGNvc19waGkgKiBkZWx0YV9sb247CglmbG9hdCBhbHMgPSBwb3coYWwsMi4wKTsKCWZsb2F0IGMgPSBwYXJhbXMuZXAyICogcG93KGNvc19waGksMi4wKTsKCWZsb2F0IHRxID0gdGFuKGxhdCk7CglmbG9hdCB0ID0gcG93KHRxLDIuMCk7Cgljb24gPSAxLjAgLSBwYXJhbXMuZXMgKiBwb3coc2luX3BoaSwyLjApOwoJZmxvYXQgbiA9IHBhcmFtcy5hIC8gc3FydChjb24pOwoJZmxvYXQgbWwgPQoJICAgIHBhcmFtcy5hICogbWxmbihwYXJhbXMuZTAsIHBhcmFtcy5lMSwgcGFyYW1zLmUyLCBwYXJhbXMuZTMsCgkJCSAgICBsYXQpOwoKCXggPSBwYXJhbXMuazAgKiBuICogYWwgKiAoMS4wICsKCQkJCSAgYWxzIC8gNi4wICogKDEuMCAtIHQgKyBjICsKCQkJCQkgICAgICAgYWxzIC8gMjAuMCAqICg1LjAgLQoJCQkJCQkJICAgICAxOC4wICogdCArCgkJCQkJCQkgICAgIHBvdyh0LAoJCQkJCQkJCTIuMCkgKwoJCQkJCQkJICAgICA3Mi4wICogYyAtCgkJCQkJCQkgICAgIDU4LjAgKgoJCQkJCQkJICAgICBwYXJhbXMuCgkJCQkJCQkgICAgIGVwMikpKSArCgkgICAgcGFyYW1zLngwOwoJeSA9IHBhcmFtcy5rMCAqIChtbCAtIHBhcmFtcy5tbDAgKwoJCQkgbiAqIHRxICogKGFscyAqCgkJCQkgICAoMC41ICsKCQkJCSAgICBhbHMgLyAyNC4wICogKDUuMCAtIHQgKyA5LjAgKiBjICsKCQkJCQkJICA0LjAgKiBwb3coYywKCQkJCQkJCSAgIDIuMCkgKwoJCQkJCQkgIGFscyAvIDMwLjAgKiAoNjEuMCAtCgkJCQkJCQkJNTguMCAqIHQgKwoJCQkJCQkJCXBvdyh0LAoJCQkJCQkJCSAgIDIuMCkgKwoJCQkJCQkJCTYwMC4wICogYyAtCgkJCQkJCQkJMzMwLjAgKgoJCQkJCQkJCXBhcmFtcy5lcDIpKSkpKQoJICAgICsgcGFyYW1zLnkwOwoKICAgIH0KCiAgICBwLnggPSB4OwogICAgcC55ID0geTsKICAgIHJldHVybiBwOwp9CgovLyBiYWNrd2FyZHMsIGkuZS4geCwgeSAtPiBsb24sIGxhdAp2ZWMyIHRtZXJjX2JhY2t3YXJkcyh2ZWMyIHAsIHRtZXJjX3BhcmFtcyBwYXJhbXMpCnsKICAgIGZsb2F0IGxvbiA9IHAueCwgbGF0ID0gcC55OwogICAgZmxvYXQgY29uLCBwaGk7CQkvKiB0ZW1wb3JhcnkgYW5nbGVzICAgICAgICovCiAgICBmbG9hdCBkZWx0YV9waGk7CQkvKiBkaWZmZXJlbmNlIGJldHdlZW4gbG9uZ2l0dWRlcyAgICAqLwogICAgY29uc3QgaW50IG1heF9pdGVyID0gNjsJLyogbWF4aW11biBudW1iZXIgb2YgaXRlcmF0aW9ucyAqLwoKICAgIGlmIChwYXJhbXMuc3BoZXJlICE9IDApIHsJLyogc3BoZXJpY2FsIGZvcm0gKi8KCWZsb2F0IGYgPSBleHAocC54IC8gKHBhcmFtcy5hICogcGFyYW1zLmswKSk7CglmbG9hdCBnID0gLjUgKiAoZiAtIDEuIC8gZik7CglmbG9hdCB0ZW1wID0gcGFyYW1zLmxhdDAgKyBwLnkgLyAocGFyYW1zLmEgKiBwYXJhbXMuazApOwoJZmxvYXQgaCA9IGNvcyh0ZW1wKTsKCWNvbiA9IHNxcnQoKDEuMCAtIGggKiBoKSAvICgxLjAgKyBnICogZykpOwoJbGF0ID0gYXNpbnooY29uKTsKCWlmICh0ZW1wIDwgMC4pCgkgICAgbGF0ID0gLWxhdDsKCWlmICgoZyA9PSAwLikgJiYgKGggPT0gMC4pKSB7CgkgICAgbG9uID0gcGFyYW1zLmxvbmcwOwoJfSBlbHNlIHsKCSAgICBsb24gPSBhZGp1c3RfbG9uKGF0YW4oZywgaCkgKyBwYXJhbXMubG9uZzApOwoJfQogICAgfSBlbHNlIHsJCQkvLyBlbGxpcHNvaWRhbCBmb3JtCglmbG9hdCB4ID0gcC54IC0gcGFyYW1zLngwOwoJZmxvYXQgeSA9IHAueSAtIHBhcmFtcy55MDsKCgljb24gPSAocGFyYW1zLm1sMCArIHkgLyBwYXJhbXMuazApIC8gcGFyYW1zLmE7CglwaGkgPSBjb247Cglmb3IgKGludCBpID0gMDsgaSA8PSBtYXhfaXRlcjsgaSsrKSB7CgkgICAgZGVsdGFfcGhpID0KCQkoKGNvbiArIHBhcmFtcy5lMSAqIHNpbigyLjAgKiBwaGkpIC0KCQkgIHBhcmFtcy5lMiAqIHNpbig0LjAgKiBwaGkpICsKCQkgIHBhcmFtcy5lMyAqIHNpbig2LjAgKiBwaGkpKSAvIHBhcmFtcy5lMCkgLSBwaGk7CgkgICAgcGhpICs9IGRlbHRhX3BoaTsKCSAgICBpZiAoYWJzKGRlbHRhX3BoaSkgPD0gRVBTTE4pCgkJYnJlYWs7CgkgICAgaWYgKGkgPj0gbWF4X2l0ZXIpIHsKCQlyZXR1cm4gdmVjMigwLiwgMC4pOwoJICAgIH0KCX0JCQkvLyBmb3IoKQoJaWYgKGFicyhwaGkpIDwgSEFMRl9QSSkgewoJICAgIC8vIHNpbmNvcyhwaGksICZzaW5fcGhpLCAmY29zX3BoaSk7CgkgICAgZmxvYXQgc2luX3BoaSA9IHNpbihwaGkpOwoJICAgIGZsb2F0IGNvc19waGkgPSBjb3MocGhpKTsKCSAgICBmbG9hdCB0YW5fcGhpID0gdGFuKHBoaSk7CgkgICAgZmxvYXQgYyA9IHBhcmFtcy5lcDIgKiBwb3coY29zX3BoaSwgMi4pOwoJICAgIGZsb2F0IGNzID0gcG93KGMsIDIuKTsKCSAgICBmbG9hdCB0ID0gcG93KHRhbl9waGksIDIuKTsKCSAgICBmbG9hdCB0cyA9IHBvdyh0LCAyLik7CgkgICAgY29uID0gMS4wIC0gcGFyYW1zLmVzICogcG93KHNpbl9waGksIDIuKTsKCSAgICBmbG9hdCBuID0gcGFyYW1zLmEgLyBzcXJ0KGNvbik7CgkgICAgZmxvYXQgciA9IG4gKiAoMS4wIC0gcGFyYW1zLmVzKSAvIGNvbjsKCSAgICBmbG9hdCBkID0geCAvIChuICogcGFyYW1zLmswKTsKCSAgICBmbG9hdCBkcyA9IHBvdyhkLCAyLik7CgkgICAgbGF0ID0KCQlwaGkgLSAobiAqIHRhbl9waGkgKiBkcyAvIHIpICogKDAuNSAtCgkJCQkJCWRzIC8gMjQuMCAqICg1LjAgKwoJCQkJCQkJICAgICAzLjAgKiB0ICsKCQkJCQkJCSAgICAgMTAuMCAqIGMgLQoJCQkJCQkJICAgICA0LjAgKiBjcyAtCgkJCQkJCQkgICAgIDkuMCAqCgkJCQkJCQkgICAgIHBhcmFtcy5lcDIgLQoJCQkJCQkJICAgICBkcyAvIDMwLjAgKgoJCQkJCQkJICAgICAoNjEuMCArCgkJCQkJCQkgICAgICA5MC4wICogdCArCgkJCQkJCQkgICAgICAyOTguMCAqIGMgKwoJCQkJCQkJICAgICAgNDUuMCAqIHRzIC0KCQkJCQkJCSAgICAgIDI1Mi4wICoKCQkJCQkJCSAgICAgIHBhcmFtcy5lcDIgLQoJCQkJCQkJICAgICAgMy4wICogY3MpKSk7CgkgICAgbG9uID0KCQlhZGp1c3RfbG9uKHBhcmFtcy5sb25nMCArCgkJCSAgIChkICoKCQkJICAgICgxLjAgLQoJCQkgICAgIGRzIC8gNi4wICogKDEuMCArIDIuMCAqIHQgKyBjIC0KCQkJCQkgZHMgLyAyMC4wICogKDUuMCAtIDIuMCAqIGMgKwoJCQkJCQkgICAgICAyOC4wICogdCAtIDMuMCAqIGNzICsKCQkJCQkJICAgICAgOC4wICogcGFyYW1zLmVwMiArCgkJCQkJCSAgICAgIDI0LjAgKiB0cykpKSAvCgkJCSAgICBjb3NfcGhpKSk7Cgl9IGVsc2UgewoJICAgIGxhdCA9IEhBTEZfUEkgKiBzaWduKHkpOwoJICAgIGxvbiA9IHBhcmFtcy5sb25nMDsKCX0KICAgIH0KICAgIHAueCA9IGxvbjsKICAgIHAueSA9IGxhdDsKICAgIHJldHVybiBwOwp9CgovLyB2aW06c3ludGF4PWM6c3c9NDpzdHM9NDpldAo=", "proj/common.glsl": "Ly8gY29uc3RhbnRzCiNkZWZpbmUgSEFMRl9QSSAgICAgMS41NzA3OTYzMjY3OTQ4OTY2CiNkZWZpbmUgUEkgICAgICAgICAgMy4xNDE1OTI2NTM1ODk3OTMKI2RlZmluZSBUV09fUEkgICAgICA2LjI4MzE4NTMwNzE3OTU4NgojZGVmaW5lIEVQU0xOICAgICAgIDFlLTEwCiNkZWZpbmUgRk9SVFBJICAgICAgMC43ODUzOTgxNjMzOTc0NDgzMwojZGVmaW5lIFIyRCAgICAgICAgIDU3LjI5NTc3OTUxMzA4MjMyMDg4CiNkZWZpbmUgRDJSICAgICAgICAgMC4wMTc0NTMyOTI1MTk5NDMyOTU3NwojZGVmaW5lIFNFQ19UT19SQUQgIDQuODQ4MTM2ODExMDk1MzU5OTM1ODk5MTQxMDIzNTdlLTYJLyogU0VDX1RPX1JBRCA9IFBpLzE4MC8zNjAwICovCiNkZWZpbmUgTUFYX0lURVIgICAgMjAKI2RlZmluZSBDT1NfNjdQNSAgICAwLjM4MjY4MzQzMjM2NTA4OTc3CS8qIGNvc2luZSBvZiA2Ny41IGRlZ3JlZXMgKi8KI2RlZmluZSBBRF9DICAgICAgICAxLjAwMjYwMDAJLyogVG9tcyByZWdpb24gMSBjb25zdGFudCAqLwoKLy8gdXRpbGl0eSBmdW5jdGlvbnMKZmxvYXQgYXNpbnooZmxvYXQgeCkKewogICAgaWYgKGFicyh4KSA+IDEuMCkgewoJeCA9ICh4ID4gMS4wKSA/IDEuMCA6IC0xLjA7CiAgICB9CiAgICByZXR1cm4gYXNpbih4KTsKfQoKZmxvYXQgYWRqdXN0X2xvbihmbG9hdCB4KQp7CiAgICB4ID0gKGFicyh4KSA8IFBJKSA/IHggOiAoeCAtIChzaWduKHgpICogVFdPX1BJKSk7CiAgICByZXR1cm4geDsKfQoKZmxvYXQgYWRqdXN0X2xhdChmbG9hdCB4KQp7CiAgICB4ID0gKGFicyh4KSA8IEhBTEZfUEkpID8geCA6ICh4IC0gKHNpZ24oeCkgKiBQSSkpOwogICAgcmV0dXJuIHg7Cn0KCi8vIEZ1bmN0aW9uIHRvIGNvbXB1dGUgdGhlIGxhdGl0dWRlIGFuZ2xlLCBwaGkyLCBmb3IgdGhlIGludmVyc2Ugb2YgdGhlCi8vICAgTGFtYmVydCBDb25mb3JtYWwgQ29uaWMgYW5kIFBvbGFyIFN0ZXJlb2dyYXBoaWMgcHJvamVjdGlvbnMuCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KZmxvYXQgcGhpMnooZmxvYXQgZWNjZW50LCBmbG9hdCB0cykKewogICAgZmxvYXQgZWNjbnRoID0gLjUgKiBlY2NlbnQ7CiAgICBmbG9hdCBjb24sIGRwaGk7CiAgICBmbG9hdCBwaGkgPSBIQUxGX1BJIC0gMi4gKiBhdGFuKHRzKTsKCiAgICBmb3IgKGludCBpID0gMDsgaSA8PSAxNTsgaSsrKSB7Cgljb24gPSBlY2NlbnQgKiBzaW4ocGhpKTsKCWRwaGkgPQoJICAgIEhBTEZfUEkgLQoJICAgIDIuICogYXRhbih0cyAqCgkJICAgICAgKHBvdygoKDEuMCAtIGNvbikgLyAoMS4wICsgY29uKSksIGVjY250aCkpKSAtIHBoaTsKCXBoaSArPSBkcGhpOwoJaWYgKGFicyhkcGhpKSA8PSAuMDAwMDAwMDAwMSkKCSAgICByZXR1cm4gcGhpOwogICAgfQoKICAgIHJldHVybiAoLTk5OTkuKTsKfQoKLy8gRnVuY3Rpb24gdG8gY29tcHV0ZSB0aGUgY29uc3RhbnQgc21hbGwgdCBmb3IgdXNlIGluIHRoZSBmb3J3YXJkCi8vICAgY29tcHV0YXRpb25zIGluIHRoZSBMYW1iZXJ0IENvbmZvcm1hbCBDb25pYyBhbmQgdGhlIFBvbGFyCi8vICAgU3RlcmVvZ3JhcGhpYyBwcm9qZWN0aW9ucy4KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KZmxvYXQgdHNmbnooZmxvYXQgZWNjZW50LCBmbG9hdCBwaGksIGZsb2F0IHNpbnBoaSkKewogICAgZmxvYXQgY29uID0gZWNjZW50ICogc2lucGhpOwogICAgZmxvYXQgY29tID0gLjUgKiBlY2NlbnQ7CiAgICBjb24gPSBwb3coKCgxLjAgLSBjb24pIC8gKDEuMCArIGNvbikpLCBjb20pOwogICAgcmV0dXJuICh0YW4oLjUgKiAoSEFMRl9QSSAtIHBoaSkpIC8gY29uKTsKfQoKZmxvYXQgbWxmbihmbG9hdCBlMCwgZmxvYXQgZTEsIGZsb2F0IGUyLCBmbG9hdCBlMywgZmxvYXQgcGhpKQp7CiAgICByZXR1cm4gKGUwICogcGhpIC0gZTEgKiBzaW4oMi4wICogcGhpKSArIGUyICogc2luKDQuMCAqIHBoaSkgLQoJICAgIGUzICogc2luKDYuMCAqIHBoaSkpOwp9CgovKiBGdW5jdGlvbiB0byBjb21wdXRlIGNvbnN0YW50IHNtYWxsIHEgd2hpY2ggaXMgdGhlIHJhZGl1cyBvZiBhIAogICBwYXJhbGxlbCBvZiBsYXRpdHVkZSwgcGhpLCBkaXZpZGVkIGJ5IHRoZSBzZW1pbWFqb3IgYXhpcy4gCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCmZsb2F0IHFzZm56KGZsb2F0IGVjY2VudCwgZmxvYXQgc2lucGhpKQp7CiAgICBmbG9hdCBjb247CiAgICBpZiAoZWNjZW50ID4gMS4wZS03KSB7Cgljb24gPSBlY2NlbnQgKiBzaW5waGk7CglyZXR1cm4gKCgxLjAgLSBlY2NlbnQgKiBlY2NlbnQpICogKHNpbnBoaSAvICgxLjAgLSBjb24gKiBjb24pIC0KCQkJCQkgICAoLjUgLyBlY2NlbnQpICoKCQkJCQkgICBsb2coKDEuMCAtIGNvbikgLyAoMS4wICsKCQkJCQkJCSAgICAgIGNvbikpKSk7CiAgICB9IGVsc2UgewoJcmV0dXJuICgyLjAgKiBzaW5waGkpOwogICAgfQp9CgovLyB2aW06c3ludGF4PWM6c3c9NDpzdHM9NDpldAo=", "proj/aea.glsl": "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKTkFNRSAgICAgICAgICAgICAgICAgICAgIEFMQkVSUyBDT05JQ0FMIEVRVUFMIEFSRUEgCgpQVVJQT1NFOglUcmFuc2Zvcm1zIGlucHV0IGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgdG8gRWFzdGluZyBhbmQgTm9ydGhpbmcKCQlmb3IgdGhlIEFsYmVycyBDb25pY2FsIEVxdWFsIEFyZWEgcHJvamVjdGlvbi4gIFRoZSBsb25naXR1ZGUKCQlhbmQgbGF0aXR1ZGUgbXVzdCBiZSBpbiByYWRpYW5zLiAgVGhlIEVhc3RpbmcgYW5kIE5vcnRoaW5nCgkJdmFsdWVzIHdpbGwgYmUgcmV0dXJuZWQgaW4gbWV0ZXJzLgoKUFJPR1JBTU1FUiAgICAgICAgICAgICAgREFURQotLS0tLS0tLS0tICAgICAgICAgICAgICAtLS0tClQuIE1pdHRhbiwgICAgICAgCUZlYiwgMTk5MgoKQUxHT1JJVEhNIFJFRkVSRU5DRVMKCjEuICBTbnlkZXIsIEpvaG4gUC4sICJNYXAgUHJvamVjdGlvbnMtLUEgV29ya2luZyBNYW51YWwiLCBVLlMuIEdlb2xvZ2ljYWwKICAgIFN1cnZleSBQcm9mZXNzaW9uYWwgUGFwZXIgMTM5NSAoU3VwZXJzZWRlcyBVU0dTIEJ1bGxldGluIDE1MzIpLCBVbml0ZWQKICAgIFN0YXRlIEdvdmVybm1lbnQgUHJpbnRpbmcgT2ZmaWNlLCBXYXNoaW5ndG9uIEQuQy4sIDE5ODcuCgoyLiAgU255ZGVyLCBKb2huIFAuIGFuZCBWb3hsYW5kLCBQaGlsaXAgTS4sICJBbiBBbGJ1bSBvZiBNYXAgUHJvamVjdGlvbnMiLAogICAgVS5TLiBHZW9sb2dpY2FsIFN1cnZleSBQcm9mZXNzaW9uYWwgUGFwZXIgMTQ1MyAsIFVuaXRlZCBTdGF0ZSBHb3Zlcm5tZW50CiAgICBQcmludGluZyBPZmZpY2UsIFdhc2hpbmd0b24gRC5DLiwgMTk4OS4KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCi8qIEZ1bmN0aW9uIHRvIGNvbXB1dGUgcGhpMSwgdGhlIGxhdGl0dWRlIGZvciB0aGUgaW52ZXJzZSBvZiB0aGUKICAgQWxiZXJzIENvbmljYWwgRXF1YWwtQXJlYSBwcm9qZWN0aW9uLgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KZmxvYXQgcGhpMXooZmxvYXQgZWNjZW50LCBmbG9hdCBxcykKewogICAgZmxvYXQgc2lucGhpLCBjb3NwaGksIGNvbiwgY29tLCBkcGhpOwogICAgZmxvYXQgcGhpID0gYXNpbnooLjUgKiBxcyk7CiAgICBpZiAoZWNjZW50IDwgRVBTTE4pIHsKCXJldHVybiBwaGk7CiAgICB9CgogICAgZmxvYXQgZWNjbnRzID0gZWNjZW50ICogZWNjZW50OwogICAgZm9yIChpbnQgaSA9IDE7IGkgPD0gMjU7IGkrKykgewoJc2lucGhpID0gc2luKHBoaSk7Cgljb3NwaGkgPSBjb3MocGhpKTsKCWNvbiA9IGVjY2VudCAqIHNpbnBoaTsKCWNvbSA9IDEuMCAtIGNvbiAqIGNvbjsKCWRwaGkgPQoJICAgIC41ICogY29tICogY29tIC8gY29zcGhpICogKHFzIC8gKDEuMCAtIGVjY250cykgLSBzaW5waGkgLyBjb20gKwoJCQkJICAgICAgIC41IC8gZWNjZW50ICogbG9nKCgxLjAgLSBjb24pIC8KCQkJCQkJCSAoMS4wICsgY29uKSkpOwoJcGhpID0gcGhpICsgZHBoaTsKCWlmIChhYnMoZHBoaSkgPD0gMWUtNSkgewoJICAgIHJldHVybiBwaGk7Cgl9CiAgICB9CiAgICByZXR1cm4gMC47Cn0KCi8qIEFsYmVycyBDb25pY2FsIEVxdWFsIEFyZWEgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5CiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCnZlYzIgYWVhX2ZvcndhcmRzKHZlYzIgcCwgYWVhX3BhcmFtcyBwYXJhbXMpCnsKICAgIGZsb2F0IGxvbiA9IHAueDsKICAgIGZsb2F0IGxhdCA9IHAueTsKCiAgICBwYXJhbXMuc2luX3BoaSA9IHNpbihsYXQpOwogICAgcGFyYW1zLmNvc19waGkgPSBjb3MobGF0KTsKCiAgICBmbG9hdCBxcyA9IHFzZm56KHBhcmFtcy5lMywgcGFyYW1zLnNpbl9waGkpOwkvLyBvcmlnaW5hbGx5IGluIFByb2o0anMgYnV0IGlzIHVzZWxlc3MgLT4gLCBwYXJhbXMuY29zX3BoaSk7CiAgICBmbG9hdCByaDEgPSBwYXJhbXMuYSAqIHNxcnQocGFyYW1zLmMgLSBwYXJhbXMubnMwICogcXMpIC8gcGFyYW1zLm5zMDsKICAgIGZsb2F0IHRoZXRhID0gcGFyYW1zLm5zMCAqIGFkanVzdF9sb24obG9uIC0gcGFyYW1zLmxvbmcwKTsKICAgIGZsb2F0IHggPSByaDEgKiBzaW4odGhldGEpICsgcGFyYW1zLngwOwogICAgZmxvYXQgeSA9IHBhcmFtcy5yaCAtIHJoMSAqIGNvcyh0aGV0YSkgKyBwYXJhbXMueTA7CgogICAgcC54ID0geDsKICAgIHAueSA9IHk7CiAgICByZXR1cm4gcDsKfQoKdmVjMiBhZWFfYmFja3dhcmRzKHZlYzIgcCwgYWVhX3BhcmFtcyBwYXJhbXMpCnsKICAgIGZsb2F0IHJoMSwgcXMsIGNvbiwgdGhldGEsIGxvbiwgbGF0OwoKICAgIHAueCAtPSBwYXJhbXMueDA7CiAgICBwLnkgPSBwYXJhbXMucmggLSBwLnkgKyBwYXJhbXMueTA7CiAgICBpZiAocGFyYW1zLm5zMCA+PSAwLikgewoJcmgxID0gc3FydChwLnggKiBwLnggKyBwLnkgKiBwLnkpOwoJY29uID0gMS4wOwogICAgfSBlbHNlIHsKCXJoMSA9IC1zcXJ0KHAueCAqIHAueCArIHAueSAqIHAueSk7Cgljb24gPSAtMS4wOwogICAgfQogICAgdGhldGEgPSAwLjA7CiAgICBpZiAocmgxICE9IDAuMCkgewoJdGhldGEgPSBhdGFuKGNvbiAqIHAueCwgY29uICogcC55KTsKICAgIH0KICAgIGNvbiA9IHJoMSAqIHBhcmFtcy5uczAgLyBwYXJhbXMuYTsKICAgIGlmICgwICE9IHBhcmFtcy5zcGhlcmUpIHsKCWxhdCA9IGFzaW4oKHBhcmFtcy5jIC0gY29uICogY29uKSAvICgyLjAgKiBwYXJhbXMubnMwKSk7CiAgICB9IGVsc2UgewoJcXMgPSAocGFyYW1zLmMgLSBjb24gKiBjb24pIC8gcGFyYW1zLm5zMDsKCWxhdCA9IHBoaTF6KHBhcmFtcy5lMywgcXMpOwogICAgfQoKICAgIGxvbiA9IGFkanVzdF9sb24odGhldGEgLyBwYXJhbXMubnMwICsgcGFyYW1zLmxvbmcwKTsKICAgIHAueCA9IGxvbjsKICAgIHAueSA9IGxhdDsKICAgIHJldHVybiBwOwp9CgoKLy8gdmltOnN5bnRheD1jOnN3PTQ6c3RzPTQ6ZXQK", "proj/merc.glsl": "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKTkFNRSAgICAgICAgICAgICAgICAgICAgICAgICAgICBNRVJDQVRPUgoKUFVSUE9TRToJVHJhbnNmb3JtcyBpbnB1dCBsb25naXR1ZGUgYW5kIGxhdGl0dWRlIHRvIEVhc3RpbmcgYW5kCgkJTm9ydGhpbmcgZm9yIHRoZSBNZXJjYXRvciBwcm9qZWN0aW9uLiAgVGhlCgkJbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBtdXN0IGJlIGluIHJhZGlhbnMuICBUaGUgRWFzdGluZwoJCWFuZCBOb3J0aGluZyB2YWx1ZXMgd2lsbCBiZSByZXR1cm5lZCBpbiBtZXRlcnMuCgpQUk9HUkFNTUVSICAgICAgICAgICAgICBEQVRFCi0tLS0tLS0tLS0gICAgICAgICAgICAgIC0tLS0KRC4gU3RlaW53YW5kLCBFUk9TICAgICAgTm92LCAxOTkxClQuIE1pdHRhbgkJTWFyLCAxOTkzCgpBTEdPUklUSE0gUkVGRVJFTkNFUwoKMS4gIFNueWRlciwgSm9obiBQLiwgIk1hcCBQcm9qZWN0aW9ucy0tQSBXb3JraW5nIE1hbnVhbCIsIFUuUy4gR2VvbG9naWNhbAogICAgU3VydmV5IFByb2Zlc3Npb25hbCBQYXBlciAxMzk1IChTdXBlcnNlZGVzIFVTR1MgQnVsbGV0aW4gMTUzMiksIFVuaXRlZAogICAgU3RhdGUgR292ZXJubWVudCBQcmludGluZyBPZmZpY2UsIFdhc2hpbmd0b24gRC5DLiwgMTk4Ny4KCjIuICBTbnlkZXIsIEpvaG4gUC4gYW5kIFZveGxhbmQsIFBoaWxpcCBNLiwgIkFuIEFsYnVtIG9mIE1hcCBQcm9qZWN0aW9ucyIsCiAgICBVLlMuIEdlb2xvZ2ljYWwgU3VydmV5IFByb2Zlc3Npb25hbCBQYXBlciAxNDUzICwgVW5pdGVkIFN0YXRlIEdvdmVybm1lbnQKICAgIFByaW50aW5nIE9mZmljZSwgV2FzaGluZ3RvbiBELkMuLCAxOTg5LgoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKLyogTWVyY2F0b3IgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5CiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwp2ZWMyIG1lcmNfZm9yd2FyZHModmVjMiBwLCBtZXJjX3BhcmFtcyBwYXJhbXMpCnsKICAgIGZsb2F0IGxvbiA9IHAueDsKICAgIGZsb2F0IGxhdCA9IHAueTsKICAgIC8vIGNvbnZlcnQgdG8gcmFkaWFucwogICAgaWYgKGxhdCAqIFIyRCA+IDkwLjAgJiYKCWxhdCAqIFIyRCA8IC05MC4wICYmIGxvbiAqIFIyRCA+IDE4MC4wICYmIGxvbiAqIFIyRCA8IC0xODAuMCkgewoJcmV0dXJuIHZlYzIoMC4sIDAuKTsKICAgIH0KCiAgICBmbG9hdCB4LCB5OwogICAgaWYgKGFicyhhYnMobGF0KSAtIEhBTEZfUEkpIDw9IEVQU0xOKSB7CgkvLyBQcm9qNGpzLnJlcG9ydEVycm9yKCJtZXJjOmZvcndhcmQ6IGxsMm1BdFBvbGVzIik7CglyZXR1cm4gdmVjMigwLiwgMC4pOwogICAgfSBlbHNlIHsKCWlmICgwICE9IHBhcmFtcy5zcGhlcmUpIHsKCSAgICB4ID0gcGFyYW1zLngwICsgcGFyYW1zLmEgKiBwYXJhbXMuazAgKiBhZGp1c3RfbG9uKGxvbiAtCgkJCQkJCQkgICAgICBwYXJhbXMuCgkJCQkJCQkgICAgICBsb25nMCk7CgkgICAgeSA9IHBhcmFtcy55MCArCgkJcGFyYW1zLmEgKiBwYXJhbXMuazAgKiBsb2codGFuKEZPUlRQSSArIDAuNSAqIGxhdCkpOwoJfSBlbHNlIHsKCSAgICBmbG9hdCBzaW5waGkgPSBzaW4obGF0KTsKCSAgICBmbG9hdCB0cyA9IHRzZm56KHBhcmFtcy5lLCBsYXQsIHNpbnBoaSk7CgkgICAgeCA9IHBhcmFtcy54MCArIHBhcmFtcy5hICogcGFyYW1zLmswICogYWRqdXN0X2xvbihsb24gLQoJCQkJCQkJICAgICAgcGFyYW1zLgoJCQkJCQkJICAgICAgbG9uZzApOwoJICAgIHkgPSBwYXJhbXMueTAgLSBwYXJhbXMuYSAqIHBhcmFtcy5rMCAqIGxvZyh0cyk7Cgl9CglwLnggPSB4OwoJcC55ID0geTsKCXJldHVybiBwOwogICAgfQp9CgovKiBNZXJjYXRvciBpbnZlcnNlIGVxdWF0aW9ucy0tbWFwcGluZyB4LHkgdG8gbGF0L2xvbmcKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwp2ZWMyIG1lcmNfYmFja3dhcmRzKHZlYzIgcCwgbWVyY19wYXJhbXMgcGFyYW1zKQp7CiAgICBmbG9hdCB4ID0gcC54IC0gcGFyYW1zLngwOwogICAgZmxvYXQgeSA9IHAueSAtIHBhcmFtcy55MDsKICAgIGZsb2F0IGxvbiwgbGF0OwoKICAgIGlmICgwICE9IHBhcmFtcy5zcGhlcmUpIHsKCWxhdCA9IEhBTEZfUEkgLSAyLjAgKiBhdGFuKGV4cCgteSAvIChwYXJhbXMuYSAqIHBhcmFtcy5rMCkpKTsKICAgIH0gZWxzZSB7CglmbG9hdCB0cyA9IGV4cCgteSAvIChwYXJhbXMuYSAqIHBhcmFtcy5rMCkpOwoJbGF0ID0gcGhpMnoocGFyYW1zLmUsIHRzKTsKCWlmIChsYXQgPT0gLTk5OTkuKSB7CgkgICAgcmV0dXJuIHZlYzIoMC4sIDAuKTsKCX0KICAgIH0KICAgIGxvbiA9IGFkanVzdF9sb24ocGFyYW1zLmxvbmcwICsgeCAvIChwYXJhbXMuYSAqIHBhcmFtcy5rMCkpOwoKICAgIHAueCA9IGxvbjsKICAgIHAueSA9IGxhdDsKICAgIHJldHVybiBwOwp9CgovLyB2aW06c3ludGF4PWM6c3c9NDpzdHM9NDpldAo="};
});
