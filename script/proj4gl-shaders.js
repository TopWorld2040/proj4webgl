
define([], function() {
return {"proj/stere-params.json": {"float": ["a", "akm1", "e", "phi0", "sinph0", "cosph0", "x0", "y0", "long0", "cosX1", "sinX1"], "int": ["sphere", "mode"]}, "proj/merc-params.json": {"float": ["a", "k0", "x0", "y0", "e", "long0"], "int": ["sphere"]}, "proj/eqc-params.json": {"float": ["long0", "lat0", "x0", "y0", "a", "rc"]}, "proj/common.glsl": "Ly8gY29uc3RhbnRzCiNkZWZpbmUgSEFMRl9QSSAgICAgMS41NzA3OTYzMjY3OTQ4OTY2CiNkZWZpbmUgUEkgICAgICAgICAgMy4xNDE1OTI2NTM1ODk3OTMKI2RlZmluZSBUV09fUEkgICAgICA2LjI4MzE4NTMwNzE3OTU4NgojZGVmaW5lIEVQU0xOICAgICAgIDFlLTEwCgovLyB1dGlsaXR5IGZ1bmN0aW9ucwpmbG9hdCBhc2lueihmbG9hdCB4KQp7CiAgICBpZiAoYWJzKHgpID4gMS4wKSB7Cgl4ID0gKHggPiAxLjApID8gMS4wIDogLTEuMDsKICAgIH0KICAgIHJldHVybiBhc2luKHgpOwp9CgpmbG9hdCBhZGp1c3RfbG9uKGZsb2F0IHgpCnsKICAgIHggPSAoYWJzKHgpIDwgUEkpID8geCA6ICh4IC0gKHNpZ24oeCkgKiBUV09fUEkpKTsKICAgIHJldHVybiB4Owp9CgpmbG9hdCBhZGp1c3RfbGF0KGZsb2F0IHgpIHsKICAgIHggPSAoYWJzKHgpIDwgSEFMRl9QSSkgPyB4OiAoeCAtIChzaWduKHgpKlBJKSApOwogICAgcmV0dXJuIHg7Cn0KCi8vIEZ1bmN0aW9uIHRvIGNvbXB1dGUgdGhlIGxhdGl0dWRlIGFuZ2xlLCBwaGkyLCBmb3IgdGhlIGludmVyc2Ugb2YgdGhlCi8vICAgTGFtYmVydCBDb25mb3JtYWwgQ29uaWMgYW5kIFBvbGFyIFN0ZXJlb2dyYXBoaWMgcHJvamVjdGlvbnMuCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KZmxvYXQgcGhpMnooZmxvYXQgZWNjZW50LCBmbG9hdCB0cykKewogICAgZmxvYXQgZWNjbnRoID0gLjUgKiBlY2NlbnQ7CiAgICBmbG9hdCBjb24sIGRwaGk7CiAgICBmbG9hdCBwaGkgPSBIQUxGX1BJIC0gMi4gKiBhdGFuKHRzKTsKCiAgICBmb3IgKGludCBpID0gMDsgaSA8PSAxNTsgaSsrKSB7Cgljb24gPSBlY2NlbnQgKiBzaW4ocGhpKTsKCWRwaGkgPQoJICAgIEhBTEZfUEkgLQoJICAgIDIuICogYXRhbih0cyAqCgkJICAgICAocG93KCgoMS4wIC0gY29uKSAvICgxLjAgKyBjb24pKSwgZWNjbnRoKSkpIC0KCSAgICBwaGk7CglwaGkgKz0gZHBoaTsKCWlmIChhYnMoZHBoaSkgPD0gLjAwMDAwMDAwMDEpCgkgICAgcmV0dXJuIHBoaTsKICAgIH0KCiAgICByZXR1cm4gKC05OTk5Lik7Cn0KCi8vIHZpbTpzeW50YXg9Yzpzdz00OnN0cz00OmV0Cg==", "proj/eqc.glsl": "Lyogc2ltaWxhciB0byBlcXVpLmpzIEZJWE1FIHByb2o0IHVzZXMgZXFjICovCgovLyBpbnZlcnNlIGVxdWF0aW9ucy0tbWFwcGluZyB4LHkgdG8gbGF0L2xvbmcKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KdmVjMiBlcWNfYmFja3dhcmRzKHZlYzIgcCwgZXFjX3BhcmFtcyBwYXJhbXMpCnsKICAgIGZsb2F0IHggPSBwLng7CiAgICBmbG9hdCB5ID0gcC55OwoKICAgIHAueCA9CglhZGp1c3RfbG9uKHBhcmFtcy5sb25nMCArCgkJICAgKCh4IC0gcGFyYW1zLngwKSAvIChwYXJhbXMuYSAqIHBhcmFtcy5yYykpKTsKICAgIHAueSA9IGFkanVzdF9sYXQocGFyYW1zLmxhdDAgKyAoKHkgLSBwYXJhbXMueTApIC8gKHBhcmFtcy5hKSkpOwogICAgcmV0dXJuIHA7Cn0KCi8vIHZpbTpzeW50YXg9Yzpzdz00OnN0cz00OmV0Cg==", "proj/laea.glsl": "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKTkFNRSAgICAgICAgICAgICAgICAgIExBTUJFUlQgQVpJTVVUSEFMIEVRVUFMLUFSRUEKIApQVVJQT1NFOglUcmFuc2Zvcm1zIGlucHV0IGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgdG8gRWFzdGluZyBhbmQKCQlOb3J0aGluZyBmb3IgdGhlIExhbWJlcnQgQXppbXV0aGFsIEVxdWFsLUFyZWEgcHJvamVjdGlvbi4gIFRoZQoJCWxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgbXVzdCBiZSBpbiByYWRpYW5zLiAgVGhlIEVhc3RpbmcKCQlhbmQgTm9ydGhpbmcgdmFsdWVzIHdpbGwgYmUgcmV0dXJuZWQgaW4gbWV0ZXJzLgoKUFJPR1JBTU1FUiAgICAgICAgICAgICAgREFURSAgICAgICAgICAgIAotLS0tLS0tLS0tICAgICAgICAgICAgICAtLS0tICAgICAgICAgICAKRC4gU3RlaW53YW5kLCBFUk9TICAgICAgTWFyY2gsIDE5OTEgICAKClRoaXMgZnVuY3Rpb24gd2FzIGFkYXB0ZWQgZnJvbSB0aGUgTGFtYmVydCBBemltdXRoYWwgRXF1YWwgQXJlYSBwcm9qZWN0aW9uCmNvZGUgKEZPUlRSQU4pIGluIHRoZSBHZW5lcmFsIENhcnRvZ3JhcGhpYyBUcmFuc2Zvcm1hdGlvbiBQYWNrYWdlIHNvZnR3YXJlCndoaWNoIGlzIGF2YWlsYWJsZSBmcm9tIHRoZSBVLlMuIEdlb2xvZ2ljYWwgU3VydmV5IE5hdGlvbmFsIE1hcHBpbmcgRGl2aXNpb24uCiAKQUxHT1JJVEhNIFJFRkVSRU5DRVMKCjEuICAiTmV3IEVxdWFsLUFyZWEgTWFwIFByb2plY3Rpb25zIGZvciBOb25jaXJjdWxhciBSZWdpb25zIiwgSm9obiBQLiBTbnlkZXIsCiAgICBUaGUgQW1lcmljYW4gQ2FydG9ncmFwaGVyLCBWb2wgMTUsIE5vLiA0LCBPY3RvYmVyIDE5ODgsIHBwLiAzNDEtMzU1LgoKMi4gIFNueWRlciwgSm9obiBQLiwgIk1hcCBQcm9qZWN0aW9ucy0tQSBXb3JraW5nIE1hbnVhbCIsIFUuUy4gR2VvbG9naWNhbAogICAgU3VydmV5IFByb2Zlc3Npb25hbCBQYXBlciAxMzk1IChTdXBlcnNlZGVzIFVTR1MgQnVsbGV0aW4gMTUzMiksIFVuaXRlZAogICAgU3RhdGUgR292ZXJubWVudCBQcmludGluZyBPZmZpY2UsIFdhc2hpbmd0b24gRC5DLiwgMTk4Ny4KCjMuICAiU29mdHdhcmUgRG9jdW1lbnRhdGlvbiBmb3IgR0NUUCBHZW5lcmFsIENhcnRvZ3JhcGhpYyBUcmFuc2Zvcm1hdGlvbgogICAgUGFja2FnZSIsIFUuUy4gR2VvbG9naWNhbCBTdXJ2ZXkgTmF0aW9uYWwgTWFwcGluZyBEaXZpc2lvbiwgTWF5IDE5ODIuCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgojZGVmaW5lIFNfUE9MRSAxCiNkZWZpbmUgTl9QT0xFIDIKI2RlZmluZSBFUVVJVCAgMwojZGVmaW5lIE9CTElRICA0CgpmbG9hdCBhdXRobGF0KGZsb2F0IGJldGEsIGZsb2F0IEFQQVszXSkKewogICAgZmxvYXQgdCA9IGJldGEgKyBiZXRhOwogICAgcmV0dXJuIChiZXRhICsgQVBBWzBdICogc2luKHQpICsgQVBBWzFdICogc2luKHQgKyB0KSArCgkgICAgQVBBWzJdICogc2luKHQgKyB0ICsgdCkpOwp9CgovLyBiYWNrd2FyZHMsIGkuZS4geCwgeSAtPiBsb24sIGxhdAp2ZWMyIGxhZWFfYmFja3dhcmRzKHZlYzIgcCwgbGFlYV9wYXJhbXMgcGFyYW1zKQp7CiAgICBwLnggLT0gcGFyYW1zLngwOwogICAgcC55IC09IHBhcmFtcy55MDsKICAgIGZsb2F0IHggPSBwLnggLyBwYXJhbXMuYTsKICAgIGZsb2F0IHkgPSBwLnkgLyBwYXJhbXMuYTsKICAgIGZsb2F0IGxhbSwgcGhpOwoKICAgIGlmICgwICE9IHBhcmFtcy5zcGhlcmUpIHsKCWZsb2F0IGNvc3ogPSAwLjAsIHJoLCBzaW56ID0gMC4wOwoKCXJoID0gc3FydCh4ICogeCArIHkgKiB5KTsKCXBoaSA9IHJoICogLjU7CglpZiAocGhpID4gMS4pIHsKCSAgICByZXR1cm4gdmVjMigwLiwgMC4pOwoJfQoJcGhpID0gMi4gKiBhc2luKHBoaSk7CglpZiAocGFyYW1zLm1vZGUgPT0gT0JMSVEgfHwgcGFyYW1zLm1vZGUgPT0gRVFVSVQpIHsKCSAgICBzaW56ID0gc2luKHBoaSk7CgkgICAgY29zeiA9IGNvcyhwaGkpOwoJfQoKCWlmIChwYXJhbXMubW9kZSA9PSBFUVVJVCkgewoJICAgIHBoaSA9IChhYnMocmgpIDw9IEVQU0xOKSA/IDAuIDogYXNpbih5ICogc2lueiAvIHJoKTsKCSAgICB4ICo9IHNpbno7CgkgICAgeSA9IGNvc3ogKiByaDsKCX0gZWxzZSBpZiAocGFyYW1zLm1vZGUgPT0gT0JMSVEpIHsKCSAgICBwaGkgPQoJCShhYnMocmgpIDw9CgkJIEVQU0xOKSA/IHBhcmFtcy5waGkwIDogYXNpbihjb3N6ICoKCQkJCQkgICAgIHBhcmFtcy5zaW5waDAKCQkJCQkgICAgICsKCQkJCQkgICAgIHkgKiBzaW56ICoKCQkJCQkgICAgIHBhcmFtcy5jb3NwaDAgLyByaCk7CgkgICAgeCAqPSBzaW56ICogcGFyYW1zLmNvc3BoMDsKCSAgICB5ID0gKGNvc3ogLSBzaW4ocGhpKSAqIHBhcmFtcy5zaW5waDApICogcmg7Cgl9IGVsc2UgaWYgKHBhcmFtcy5tb2RlID09IE5fUE9MRSkgewoJICAgIHkgPSAteTsKCSAgICBwaGkgPSBIQUxGX1BJIC0gcGhpOwoJfSBlbHNlIGlmIChwYXJhbXMubW9kZSA9PSBTX1BPTEUpIHsKCSAgICBwaGkgLT0gSEFMRl9QSTsKCX0KCWxhbSA9ICh5ID09IDAuCgkgICAgICAgJiYgKHBhcmFtcy5tb2RlID09IEVRVUlUCgkJICAgfHwgcGFyYW1zLm1vZGUgPT0gT0JMSVEpKSA/IDAuIDogYXRhbih4LCB5KTsKICAgIH0gZWxzZSB7CglmbG9hdCBjQ2UsIHNDZSwgcSwgcmhvLCBhYiA9IDAuMDsKCglpZiAoKHBhcmFtcy5tb2RlID09IEVRVUlUKSB8fCAocGFyYW1zLm1vZGUgPT0gT0JMSVEpKSB7CgkgICAgeCAvPSBwYXJhbXMuZGQ7CgkgICAgeSAqPSBwYXJhbXMuZGQ7CgkgICAgcmhvID0gc3FydCh4ICogeCArIHkgKiB5KTsKCSAgICBpZiAocmhvIDwgRVBTTE4pIHsKCQlwLnggPSAwLjsKCQlwLnkgPSBwYXJhbXMucGhpMDsKCQlyZXR1cm4gcDsKCSAgICB9CgkgICAgc0NlID0gMi4gKiBhc2luKC41ICogcmhvIC8gcGFyYW1zLnJxKTsKCSAgICBjQ2UgPSBjb3Moc0NlKTsKCSAgICB4ICo9IChzQ2UgPSBzaW4oc0NlKSk7CgkgICAgaWYgKHBhcmFtcy5tb2RlID09IE9CTElRKSB7CgkJYWIgPSBjQ2UgKiBwYXJhbXMuc2luYjEgKyB5ICogc0NlICogcGFyYW1zLmNvc2IxIC8gcmhvOwoJCXEgPSBwYXJhbXMucXAgKiBhYjsKCQl5ID0gcmhvICogcGFyYW1zLmNvc2IxICogY0NlIC0geSAqIHBhcmFtcy5zaW5iMSAqIHNDZTsKCSAgICB9IGVsc2UgewoJCWFiID0geSAqIHNDZSAvIHJobzsKCQlxID0gcGFyYW1zLnFwICogYWI7CgkJeSA9IHJobyAqIGNDZTsKCSAgICB9Cgl9IGVsc2UgaWYgKChwYXJhbXMubW9kZSA9PSBOX1BPTEUpIHx8IChwYXJhbXMubW9kZSA9PSBTX1BPTEUpKSB7CgkgICAgaWYgKHBhcmFtcy5tb2RlID09IE5fUE9MRSkgewoJCXkgPSAteTsKCSAgICB9CgkgICAgcSA9ICh4ICogeCArIHkgKiB5KTsKCSAgICBpZiAocSA8IEVQU0xOKSB7CgkJcC54ID0gMC47CgkJcC55ID0gcGFyYW1zLnBoaTA7CgkJcmV0dXJuIHA7CgkgICAgfQoJICAgIC8qCgkgICAgICAgcSA9IHBhcmFtcy5xcCAtIHE7CgkgICAgICovCgkgICAgYWIgPSAxLiAtIHEgLyBwYXJhbXMucXA7CgkgICAgaWYgKHBhcmFtcy5tb2RlID09IFNfUE9MRSkgewoJCWFiID0gLWFiOwoJICAgIH0KCX0KCWxhbSA9IGF0YW4oeCwgeSk7CglwaGkgPSBhdXRobGF0KGFzaW4oYWIpLCBwYXJhbXMuYXBhKTsKICAgIH0KCiAgICBwLnggPSBhZGp1c3RfbG9uKHBhcmFtcy5sb25nMCArIGxhbSk7CiAgICBwLnkgPSBwaGk7CiAgICByZXR1cm4gcDsKfQoKLy8gdmltOnN5bnRheD1jOnN3PTQ6c3RzPTQ6ZXQK", "proj/stere.glsl": "Ly8gY29uc3RhbnRzCiNkZWZpbmUgIFRPTAkxLmUtOAojZGVmaW5lICBOSVRFUgk4CiNkZWZpbmUgIENPTlYJMS5lLTEwCiNkZWZpbmUgIFNfUE9MRQkwCiNkZWZpbmUgIE5fUE9MRQkxCiNkZWZpbmUgIE9CTElRCTIKI2RlZmluZSAgRVFVSVQJMwoKLy8gYmFja3dhcmRzLCBpLmUuIHgsIHkgLT4gbG9uLCBsYXQKdmVjMiBzdGVyZV9iYWNrd2FyZHModmVjMiBwLCBzdGVyZV9wYXJhbXMgcGFyYW1zKQp7CiAgICBmbG9hdCB4ID0gKHAueCAtIHBhcmFtcy54MCkgLyBwYXJhbXMuYTsJLyogZGVzY2FsZSBhbmQgZGUtb2Zmc2V0ICovCiAgICBmbG9hdCB5ID0gKHAueSAtIHBhcmFtcy55MCkgLyBwYXJhbXMuYTsKICAgIGZsb2F0IGxvbiwgbGF0OwoKICAgIGZsb2F0IGNvc3BoaSwgc2lucGhpLCB0cCA9IDAuMCwgcGhpX2wgPSAwLjAsIHJobywgaGFsZmUgPSAwLjAsIHBpMiA9CgkwLjA7CiAgICBmbG9hdCBpOwoKICAgIGlmICgwICE9IHBhcmFtcy5zcGhlcmUpIHsKCWZsb2F0IGMsIHJoLCBzaW5jLCBjb3NjOwoKCXJoID0gc3FydCh4ICogeCArIHkgKiB5KTsKCWMgPSAyLiAqIGF0YW4ocmggLyBwYXJhbXMuYWttMSk7CglzaW5jID0gc2luKGMpOwoJY29zYyA9IGNvcyhjKTsKCWxvbiA9IDAuOwoJaWYgKHBhcmFtcy5tb2RlID09IEVRVUlUKSB7CgkgICAgaWYgKGFicyhyaCkgPD0gRVBTTE4pIHsKCQlsYXQgPSAwLjsKCSAgICB9IGVsc2UgewoJCWxhdCA9IGFzaW4oeSAqIHNpbmMgLyByaCk7CgkgICAgfQoJICAgIGlmIChjb3NjICE9IDAuIHx8IHggIT0gMC4pCgkJbG9uID0gYXRhbih4ICogc2luYywgY29zYyAqIHJoKTsKCX0gZWxzZSBpZiAocGFyYW1zLm1vZGUgPT0gT0JMSVEpIHsKCSAgICBpZiAoYWJzKHJoKSA8PSBFUFNMTikgewoJCWxhdCA9IHBhcmFtcy5waGkwOwoJICAgIH0gZWxzZSB7CgkJbGF0ID0KCQkgICAgYXNpbihjb3NjICogcGFyYW1zLnNpbnBoMCArIHkgKiBzaW5jICogcGFyYW1zLmNvc3BoMCAvIHJoKTsKCSAgICB9CgkgICAgYyA9IGNvc2MgLSBwYXJhbXMuc2lucGgwICogc2luKGxhdCk7CgkgICAgaWYgKGMgIT0gMC4gfHwgeCAhPSAwLikgewoJCWxvbiA9IGF0YW4oeCAqIHNpbmMgKiBwYXJhbXMuY29zcGgwLCBjICogcmgpOwoJICAgIH0KCX0gZWxzZSBpZiAocGFyYW1zLm1vZGUgPT0gTl9QT0xFKSB7CgkgICAgeSA9IC15OwoJICAgIGlmIChhYnMocmgpIDw9IEVQU0xOKSB7CgkJbGF0ID0gcGFyYW1zLnBoaTA7CgkgICAgfSBlbHNlIHsKCQlsYXQgPSBhc2luKHBhcmFtcy5tb2RlID09IFNfUE9MRSA/IC1jb3NjIDogY29zYyk7CgkgICAgfQoJICAgIGlmICgoeCA9PSAwLikgJiYgKHkgPT0gMC4pKSB7CgkJbG9uID0gMC47CgkgICAgfSBlbHNlIHsKCQlsb24gPSBhdGFuKHgsIHkpOwoJICAgIH0KCX0gZWxzZSBpZiAocGFyYW1zLm1vZGUgPT0gU19QT0xFKSB7CgkgICAgaWYgKGFicyhyaCkgPD0gRVBTTE4pIHsKCQlsYXQgPSBwYXJhbXMucGhpMDsKCSAgICB9IGVsc2UgewoJCWxhdCA9IGFzaW4ocGFyYW1zLm1vZGUgPT0gU19QT0xFID8gLWNvc2MgOiBjb3NjKTsKCSAgICB9CgkgICAgbG9uID0gKHggPT0gMC4gJiYgeSA9PSAwLikgPyAwLiA6IGF0YW4oeCwgeSk7Cgl9CglwLnggPSBhZGp1c3RfbG9uKGxvbiArIHBhcmFtcy5sb25nMCk7CglwLnkgPSBsYXQ7CiAgICB9IGVsc2UgewoJcmhvID0gc3FydCh4ICogeCArIHkgKiB5KTsKCWlmICgocGFyYW1zLm1vZGUgPT0gT0JMSVEpIHx8IChwYXJhbXMubW9kZSA9PSBFUVVJVCkpIHsKCSAgICB0cCA9IDIuICogYXRhbihyaG8gKiBwYXJhbXMuY29zWDEsIHBhcmFtcy5ha20xKTsKCSAgICBjb3NwaGkgPSBjb3ModHApOwoJICAgIHNpbnBoaSA9IHNpbih0cCk7CgkgICAgaWYgKHJobyA9PSAwLjApIHsKCQlwaGlfbCA9IGFzaW4oY29zcGhpICogcGFyYW1zLnNpblgxKTsKCSAgICB9IGVsc2UgewoJCXBoaV9sID0KCQkgICAgYXNpbihjb3NwaGkgKiBwYXJhbXMuc2luWDEgKwoJCQkgKHkgKiBzaW5waGkgKiBwYXJhbXMuY29zWDEgLyByaG8pKTsKCSAgICB9CgoJICAgIHRwID0gdGFuKC41ICogKEhBTEZfUEkgKyBwaGlfbCkpOwoJICAgIHggKj0gc2lucGhpOwoJICAgIHkgPSByaG8gKiBwYXJhbXMuY29zWDEgKiBjb3NwaGkgLSB5ICogcGFyYW1zLnNpblgxICogc2lucGhpOwoJICAgIHBpMiA9IEhBTEZfUEk7CgkgICAgaGFsZmUgPSAuNSAqIHBhcmFtcy5lOwoJfSBlbHNlIGlmICgocGFyYW1zLm1vZGUgPT0gTl9QT0xFKSB8fCAocGFyYW1zLm1vZGUgPT0gU19QT0xFKSkgewoJICAgIGlmIChwYXJhbXMubW9kZSA9PSBOX1BPTEUpIHsKCQl5ID0gLXk7CgkgICAgfQoJICAgIHRwID0gLXJobyAvIHBhcmFtcy5ha20xOwoJICAgIHBoaV9sID0gSEFMRl9QSSAtIDIuICogYXRhbih0cCk7CgkgICAgcGkyID0gLUhBTEZfUEk7CgkgICAgaGFsZmUgPSAtLjUgKiBwYXJhbXMuZTsKCX0KCWZvciAoaW50IGkgPSAwOyBpIDwgTklURVI7IGkrKykgewoJICAgIHBoaV9sID0gbGF0OwoJICAgIHNpbnBoaSA9IHBhcmFtcy5lICogc2luKHBoaV9sKTsKCSAgICBsYXQgPQoJCTIuICogYXRhbih0cCAqIHBvdygoMS4gKyBzaW5waGkpIC8gKDEuIC0gc2lucGhpKSwgaGFsZmUpKSAtCgkJcGkyOwoJICAgIGlmIChhYnMocGhpX2wgLSBsYXQpIDwgQ09OVikgewoJCWlmIChwYXJhbXMubW9kZSA9PSBTX1BPTEUpCgkJICAgIGxhdCA9IC1sYXQ7CgkJbG9uID0gKHggPT0gMC4gJiYgeSA9PSAwLikgPyAwLiA6IGF0YW4oeCwgeSk7CgkJcC54ID0gYWRqdXN0X2xvbihsb24gKyBwYXJhbXMubG9uZzApOwoJCXAueSA9IGxhdDsKCQlyZXR1cm4gcDsKCSAgICB9Cgl9CiAgICB9Cn0KCi8vIHZpbTpzeW50YXg9Yzpzdz00OnN0cz00OmV0Cg==", "proj/tmerc-params.json": {"float": ["a", "k0", "lat0", "long0", "x0", "y0", "ml0", "es", "ep2", "e0", "e1", "e2", "e3"], "int": ["sphere"]}, "proj/tmerc.glsl": "Ly8gYmFja3dhcmRzLCBpLmUuIHgsIHkgLT4gbG9uLCBsYXQKdmVjMiB0bWVyY19iYWNrd2FyZHModmVjMiBwLCB0bWVyY19wYXJhbXMgcGFyYW1zKQp7CiAgICBmbG9hdCBsb24gPSBwLngsIGxhdCA9IHAueTsKICAgIGZsb2F0IGNvbiwgcGhpOwkJLyogdGVtcG9yYXJ5IGFuZ2xlcyAgICAgICAqLwogICAgZmxvYXQgZGVsdGFfcGhpOwkJLyogZGlmZmVyZW5jZSBiZXR3ZWVuIGxvbmdpdHVkZXMgICAgKi8KICAgIGNvbnN0IGludCBtYXhfaXRlciA9IDY7CS8qIG1heGltdW4gbnVtYmVyIG9mIGl0ZXJhdGlvbnMgKi8KCiAgICBpZiAocGFyYW1zLnNwaGVyZSAhPSAwKSB7CS8qIHNwaGVyaWNhbCBmb3JtICovCglmbG9hdCBmID0gZXhwKHAueCAvIChwYXJhbXMuYSAqIHBhcmFtcy5rMCkpOwoJZmxvYXQgZyA9IC41ICogKGYgLSAxLiAvIGYpOwoJZmxvYXQgdGVtcCA9IHBhcmFtcy5sYXQwICsgcC55IC8gKHBhcmFtcy5hICogcGFyYW1zLmswKTsKCWZsb2F0IGggPSBjb3ModGVtcCk7Cgljb24gPSBzcXJ0KCgxLjAgLSBoICogaCkgLyAoMS4wICsgZyAqIGcpKTsKCWxhdCA9IGFzaW56KGNvbik7CglpZiAodGVtcCA8IDAuKQoJICAgIGxhdCA9IC1sYXQ7CglpZiAoKGcgPT0gMC4pICYmIChoID09IDAuKSkgewoJICAgIGxvbiA9IHBhcmFtcy5sb25nMDsKCX0gZWxzZSB7CgkgICAgbG9uID0gYWRqdXN0X2xvbihhdGFuKGcsIGgpICsgcGFyYW1zLmxvbmcwKTsKCX0KICAgIH0gZWxzZSB7CQkJLy8gZWxsaXBzb2lkYWwgZm9ybQoJZmxvYXQgeCA9IHAueCAtIHBhcmFtcy54MDsKCWZsb2F0IHkgPSBwLnkgLSBwYXJhbXMueTA7CgoJY29uID0gKHBhcmFtcy5tbDAgKyB5IC8gcGFyYW1zLmswKSAvIHBhcmFtcy5hOwoJcGhpID0gY29uOwoJZm9yIChpbnQgaSA9IDA7IGkgPD0gbWF4X2l0ZXI7IGkrKykgewoJICAgIGRlbHRhX3BoaSA9CgkJKChjb24gKyBwYXJhbXMuZTEgKiBzaW4oMi4wICogcGhpKSAtCgkJICBwYXJhbXMuZTIgKiBzaW4oNC4wICogcGhpKSArCgkJICBwYXJhbXMuZTMgKiBzaW4oNi4wICogcGhpKSkgLyBwYXJhbXMuZTApIC0gcGhpOwoJICAgIHBoaSArPSBkZWx0YV9waGk7CgkgICAgaWYgKGFicyhkZWx0YV9waGkpIDw9IEVQU0xOKQoJCWJyZWFrOwoJICAgIGlmIChpID49IG1heF9pdGVyKSB7CgkJcmV0dXJuIHZlYzIoMC4sIDAuKTsKCSAgICB9Cgl9CQkJLy8gZm9yKCkKCWlmIChhYnMocGhpKSA8IEhBTEZfUEkpIHsKCSAgICAvLyBzaW5jb3MocGhpLCAmc2luX3BoaSwgJmNvc19waGkpOwoJICAgIGZsb2F0IHNpbl9waGkgPSBzaW4ocGhpKTsKCSAgICBmbG9hdCBjb3NfcGhpID0gY29zKHBoaSk7CgkgICAgZmxvYXQgdGFuX3BoaSA9IHRhbihwaGkpOwoJICAgIGZsb2F0IGMgPSBwYXJhbXMuZXAyICogcG93KGNvc19waGksIDIuKTsKCSAgICBmbG9hdCBjcyA9IHBvdyhjLCAyLik7CgkgICAgZmxvYXQgdCA9IHBvdyh0YW5fcGhpLCAyLik7CgkgICAgZmxvYXQgdHMgPSBwb3codCwgMi4pOwoJICAgIGNvbiA9IDEuMCAtIHBhcmFtcy5lcyAqIHBvdyhzaW5fcGhpLCAyLik7CgkgICAgZmxvYXQgbiA9IHBhcmFtcy5hIC8gc3FydChjb24pOwoJICAgIGZsb2F0IHIgPSBuICogKDEuMCAtIHBhcmFtcy5lcykgLyBjb247CgkgICAgZmxvYXQgZCA9IHggLyAobiAqIHBhcmFtcy5rMCk7CgkgICAgZmxvYXQgZHMgPSBwb3coZCwgMi4pOwoJICAgIGxhdCA9CgkJcGhpIC0gKG4gKiB0YW5fcGhpICogZHMgLyByKSAqICgwLjUgLQoJCQkJCQlkcyAvIDI0LjAgKiAoNS4wICsKCQkJCQkJCSAgICAgMy4wICogdCArCgkJCQkJCQkgICAgIDEwLjAgKiBjIC0KCQkJCQkJCSAgICAgNC4wICogY3MgLQoJCQkJCQkJICAgICA5LjAgKgoJCQkJCQkJICAgICBwYXJhbXMuZXAyIC0KCQkJCQkJCSAgICAgZHMgLyAzMC4wICoKCQkJCQkJCSAgICAgKDYxLjAgKwoJCQkJCQkJICAgICAgOTAuMCAqIHQgKwoJCQkJCQkJICAgICAgMjk4LjAgKiBjICsKCQkJCQkJCSAgICAgIDQ1LjAgKiB0cyAtCgkJCQkJCQkgICAgICAyNTIuMCAqCgkJCQkJCQkgICAgICBwYXJhbXMuZXAyIC0KCQkJCQkJCSAgICAgIDMuMCAqIGNzKSkpOwoJICAgIGxvbiA9CgkJYWRqdXN0X2xvbihwYXJhbXMubG9uZzAgKwoJCQkgICAoZCAqCgkJCSAgICAoMS4wIC0KCQkJICAgICBkcyAvIDYuMCAqICgxLjAgKyAyLjAgKiB0ICsgYyAtCgkJCQkJIGRzIC8gMjAuMCAqICg1LjAgLSAyLjAgKiBjICsKCQkJCQkJICAgICAgMjguMCAqIHQgLSAzLjAgKiBjcyArCgkJCQkJCSAgICAgIDguMCAqIHBhcmFtcy5lcDIgKwoJCQkJCQkgICAgICAyNC4wICogdHMpKSkgLwoJCQkgICAgY29zX3BoaSkpOwoJfSBlbHNlIHsKCSAgICBsYXQgPSBIQUxGX1BJICogc2lnbih5KTsKCSAgICBsb24gPSBwYXJhbXMubG9uZzA7Cgl9CiAgICB9CiAgICBwLnggPSBsb247CiAgICBwLnkgPSBsYXQ7CiAgICByZXR1cm4gcDsKfQoKLy8gdmltOnN5bnRheD1jOnN3PTQ6c3RzPTQ6ZXQK", "proj/merc.glsl": "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKTkFNRSAgICAgICAgICAgICAgICAgICAgICAgICAgICBNRVJDQVRPUgoKUFVSUE9TRToJVHJhbnNmb3JtcyBpbnB1dCBsb25naXR1ZGUgYW5kIGxhdGl0dWRlIHRvIEVhc3RpbmcgYW5kCgkJTm9ydGhpbmcgZm9yIHRoZSBNZXJjYXRvciBwcm9qZWN0aW9uLiAgVGhlCgkJbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBtdXN0IGJlIGluIHJhZGlhbnMuICBUaGUgRWFzdGluZwoJCWFuZCBOb3J0aGluZyB2YWx1ZXMgd2lsbCBiZSByZXR1cm5lZCBpbiBtZXRlcnMuCgpQUk9HUkFNTUVSICAgICAgICAgICAgICBEQVRFCi0tLS0tLS0tLS0gICAgICAgICAgICAgIC0tLS0KRC4gU3RlaW53YW5kLCBFUk9TICAgICAgTm92LCAxOTkxClQuIE1pdHRhbgkJTWFyLCAxOTkzCgpBTEdPUklUSE0gUkVGRVJFTkNFUwoKMS4gIFNueWRlciwgSm9obiBQLiwgIk1hcCBQcm9qZWN0aW9ucy0tQSBXb3JraW5nIE1hbnVhbCIsIFUuUy4gR2VvbG9naWNhbAogICAgU3VydmV5IFByb2Zlc3Npb25hbCBQYXBlciAxMzk1IChTdXBlcnNlZGVzIFVTR1MgQnVsbGV0aW4gMTUzMiksIFVuaXRlZAogICAgU3RhdGUgR292ZXJubWVudCBQcmludGluZyBPZmZpY2UsIFdhc2hpbmd0b24gRC5DLiwgMTk4Ny4KCjIuICBTbnlkZXIsIEpvaG4gUC4gYW5kIFZveGxhbmQsIFBoaWxpcCBNLiwgIkFuIEFsYnVtIG9mIE1hcCBQcm9qZWN0aW9ucyIsCiAgICBVLlMuIEdlb2xvZ2ljYWwgU3VydmV5IFByb2Zlc3Npb25hbCBQYXBlciAxNDUzICwgVW5pdGVkIFN0YXRlIEdvdmVybm1lbnQKICAgIFByaW50aW5nIE9mZmljZSwgV2FzaGluZ3RvbiBELkMuLCAxOTg5LgoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKLyogTWVyY2F0b3IgaW52ZXJzZSBlcXVhdGlvbnMtLW1hcHBpbmcgeCx5IHRvIGxhdC9sb25nCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KdmVjMiBtZXJjX2JhY2t3YXJkcyh2ZWMyIHAsIG1lcmNfcGFyYW1zIHBhcmFtcykKewogICAgZmxvYXQgeCA9IHAueCAtIHBhcmFtcy54MDsKICAgIGZsb2F0IHkgPSBwLnkgLSBwYXJhbXMueTA7CiAgICBmbG9hdCBsb24sIGxhdDsKCiAgICBpZiAoMCAhPSBwYXJhbXMuc3BoZXJlKSB7CglsYXQgPQoJICAgIEhBTEZfUEkgLQoJICAgIDIuMCAqIGF0YW4oZXhwKC15IC8gKHBhcmFtcy5hICogcGFyYW1zLmswKSkpOwogICAgfSBlbHNlIHsKCWZsb2F0IHRzID0gZXhwKC15IC8gKHBhcmFtcy5hICogcGFyYW1zLmswKSk7CglsYXQgPSBwaGkyeihwYXJhbXMuZSwgdHMpOwoJaWYgKGxhdCA9PSAtOTk5OS4pIHsKICAgICAgICAgICAgcmV0dXJuIHZlYzIoMC4sMC4pOwoJfQogICAgfQogICAgbG9uID0gYWRqdXN0X2xvbihwYXJhbXMubG9uZzAgKyB4IC8gKHBhcmFtcy5hICogcGFyYW1zLmswKSk7CgogICAgcC54ID0gbG9uOwogICAgcC55ID0gbGF0OwogICAgcmV0dXJuIHA7Cn0KCi8vIHZpbTpzeW50YXg9Yzpzdz00OnN0cz00OmV0Cg==", "proj/eqc.glsl~": "Lyogc2ltaWxhciB0byBlcXVpLmpzIEZJWE1FIHByb2o0IHVzZXMgZXFjICovCgovLyBpbnZlcnNlIGVxdWF0aW9ucy0tbWFwcGluZyB4LHkgdG8gbGF0L2xvbmcKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KdmVjMiBlcWNfYmFja3dhcmRzKHZlYzIgcCwgZXFjX3BhcmFtcyBwYXJhbXMpCnsKICAgIGZsb2F0IHggPSBwLng7CiAgICBmbG9hdCB5ID0gcC55OwoKICAgIHAueCA9CglhZGp1c3RfbG9uKHBhcmFtcy4ubG9uZzAgKwoJCQkJICAoKHggLSBwYXJhbXMuLngwKSAvIChwYXJhbXMuLmEgKiBwYXJhbXMuLnJjKSkpOwogICAgcC55ID0KCWFkanVzdF9sYXQocGFyYW1zLi5sYXQwICsgKCh5IC0gcGFyYW1zLi55MCkgLyAocGFyYW1zLi5hKSkpOwogICAgcmV0dXJuIHA7Cn0KCi8vIHZpbTpzeW50YXg9Yzpzdz00OnN0cz00OmV0Cg==", "proj/laea-params.json": {"float": ["a", "x0", "y0", "phi0", "sinph0", "cosph0", "dd", "rq", "qp", "sinb1", "cosb1", "long0"], "int": ["sphere", "mode"], "float[3]": ["apa"]}};
});
